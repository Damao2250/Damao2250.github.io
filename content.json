{"meta":{"title":"Damao Bolg","subtitle":"","description":"复制粘贴攻城狮","author":"Damao","url":"https://damao2250.github.io","root":"/"},"pages":[],"posts":[{"title":"Vue3的setup函数","slug":"Vue3的setup函数","date":"2020-12-30T08:03:09.000Z","updated":"2020-12-30T08:14:51.278Z","comments":true,"path":"2020/12/30/Vue3的setup函数/","link":"","permalink":"https://damao2250.github.io/2020/12/30/Vue3%E7%9A%84setup%E5%87%BD%E6%95%B0/","excerpt":"","text":"setup函数 setup用于定义变量和方法 ref用于声明简单数据类型，如：String Number Boolean reactive用来声明复杂数据类型，如：Array Objec 是使用Composition API的入口 Composition API的主要思想，将它们定义为从新的setup函数返回的JavaScript变量，而不是从组件的功能（如：data、methods、computed等）定义为对象的属性 Composition API 代替 Vue Mixins （解决命名冲突、隐式依赖、代码重用等问题） 在生命周期beforeCreate前被调用（执行setup时，组件实例尚未被创建） 可以返回一个对象，这个对象的属性会被合并到渲染上下文，可以在模板中直接使用 也可以返回一个渲染函数，如：return () =&gt; h('div', [count.value, object.foo]) 在setup中没有this 接收props作为第一个参数，如果props为对象，可通过watchEffect监视其变化 接收context作为第二个参数，这个对象包含attrs、slots、emit三个属性 context非响应式，可以直接解构使用 setup(props,{attr,slots,emit}){} 执行setup函数时可以访问：props、attrs、slots、emit，不可以访问：data、computed、methods 1234567891011121314151617181920212223242526272829303132import { ref, reactive, toRefs, isRef } from 'vue'export defalut { props:{ title: String }, setup( props, context ){ console.log(props.title); // 不能直接解构 const { title } = toRefs(props) let count = ref(0) // 声明简单数据类型 console.log(count.valeu); console.log(isRef(count)); // 判断是否为ref创建出来的对象 let arr = reactive([1,3,5,7,9]) // 声明复杂数据类型 let addOne = () =&gt; { count.value++ // 想改变或获取值 必须 xxx.value } // Attribute(非响应式对象) console.log(context.attrs) // 插槽(非响应式对象) console.log(context.slots) // 触发时间（方法） console.log(content.emit) return { // 必须返回 模板中才能使用 count, arr, addOne } }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"Vue3","slug":"Vue3","permalink":"https://damao2250.github.io/tags/Vue3/"}]},{"title":"小程序通知推送","slug":"小程序通知推送","date":"2020-12-29T09:14:48.000Z","updated":"2020-12-29T09:16:51.693Z","comments":true,"path":"2020/12/29/小程序通知推送/","link":"","permalink":"https://damao2250.github.io/2020/12/29/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%80%9A%E7%9F%A5%E6%8E%A8%E9%80%81/","excerpt":"","text":"小程序推送通知方式（订阅消息&amp;消息模板）小程序发送小程序的订阅消息(推送到服务通知) 准备1：登录小程序-功能-订阅消息（未开通的，需要先开通）-从模板库中添加消息模板并获得模板ID（也可以申请消息模板） 步骤： 获取下发权限 （用户发生点击行为或者发起支付回调后）— 调用接口下发订阅消息 获取js_code 根据js_code获取OpenId和UnionID 获取小程序access_token 根据access_token调用接口下发订阅消息 参考的开发文档 获取下发权限 调用接口下发订阅消息 小程序调用公众号的消息模板(推送到微信公众号) 准备1：注册微信开放平台，将微信公众号和小程序绑定到微信开放平台（目的：获取UnionID） 准备2：微信公众号添加消息模板功能，从模板库中添加消息模板并获得模板ID，也可以申请模板 步骤：(根据用户唯一的UnionID去寻找用户在公众号的OpenId,再根据微信公众号的OpenId发送通知到相应的用户) 批量获取微信公众号关注的用户Openid 根据用户Openid获取微信公众号关注的用户UnionID 将微信公众号关注的用户Openid、UnionID保存到数据库 两种方式获取小程序用户UnionID 根据js_code获取小程序的OpenId和UnionID 根据小程序的OpenId、access_token获取用户信息UserInfo，根据UserInfo的encryptedData字段解密出小程序的UnionID（不推荐） 根据小程序appid、secret获取小程序access_token 根据小程序的UnionID去数据库匹配用户在公众号的OpenId 根据用户在公众号的OpenId、access_token发送消息模板到对应用户 参考的开发文档 微信开放平台登录 微信公众号登录 微信小程序登录 公众号消息模板接口 公众号关注/取消关注事件：微信公众号-开发-基本配置-服务器配置-启用 服务器配置 公众号获取用户列表/获取OpenId 公众号获取用户基本信息(UnionID) 公众号获取Access token 小程序获取js_code 小程序获取OpenId和UnionID/获取code2Session 小程序获取access_token 小程序获取用户信息UserInfo UserInfo解密算法解密 公众号消息模板发送 下发统一服务消息（官方不支持了） 下发小程序和公众号统一的服务消息（需要填小程序模板id和公众号模板id） 小程序消息模板（已废弃） document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://damao2250.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"一份参考用的axios封装","slug":"一份参考用的axios封装","date":"2020-11-19T12:51:43.000Z","updated":"2020-12-28T07:18:31.053Z","comments":true,"path":"2020/11/19/一份参考用的axios封装/","link":"","permalink":"https://damao2250.github.io/2020/11/19/%E4%B8%80%E4%BB%BD%E5%8F%82%E8%80%83%E7%94%A8%E7%9A%84axios%E5%B0%81%E8%A3%85/","excerpt":"","text":"一份拷贝即用的axios封装代码 安装Axios1npm install axios 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106import axios, { AxiosRequestConfig, AxiosResponse } from 'axios'const showStatus = (status: number) =&gt; { let message = '' switch (status) { case 400: message = '请求错误(400)' break case 401: message = '未授权，请重新登录(401)' break case 403: message = '拒绝访问(403)' break case 404: message = '请求出错(404)' break case 408: message = '请求超时(408)' break case 500: message = '服务器错误(500)' break case 501: message = '服务未实现(501)' break case 502: message = '网络错误(502)' break case 503: message = '服务不可用(503)' break case 504: message = '网络超时(504)' break case 505: message = 'HTTP版本不受支持(505)' break default: message = `连接出错(${status})!` } return `${message}，请检查网络或联系管理员！`}const service = axios.create({ // 联调 baseURL: process.env.NODE_ENV === 'production' ? `/` : '/apis', headers: { get: { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8' }, post: { 'Content-Type': 'application/json;charset=utf-8' } }, // 是否跨站点访问控制请求 withCredentials: true, timeout: 30000, transformRequest: [(data) =&gt; { data = JSON.stringify(data) return data }], validateStatus () { // 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常 return true }, transformResponse: [(data) =&gt; { if (typeof data === 'string' &amp;&amp; data.startsWith('{')) { data = JSON.parse(data) } return data }]})// 请求拦截器service.interceptors.request.use((config: AxiosRequestConfig) =&gt; { return config}, (error) =&gt; { // 错误抛到业务代码 error.data = {} error.data.msg = '服务器异常，请联系管理员！' return Promise.resolve(error)})// 响应拦截器service.interceptors.response.use((response: AxiosResponse) =&gt; { const status = response.status let msg = '' if (status &lt; 200 || status &gt;= 300) { // 处理http错误，抛到业务代码 msg = showStatus(status) if (typeof response.data === 'string') { response.data = {msg} } else { response.data.msg = msg } } return response}, (error) =&gt; { // 错误抛到业务代码 error.data = {} error.data.msg = '请求超时或服务器异常，请检查网络或联系管理员！' return Promise.resolve(error)})export default service 一些关于Axios的注释 请求方法应为小写：method: get/post/put/delete在axios内部全部转为小写 Axios实现原理是基于 XMLHttpRequest 详细可见’axios/lib/adapters/xhr.js’#20 ‘axios/lib/adapters/xhr.js’ -&gt; 浏览器请求模块 ‘axios/lib/cancel/Cancel.js’ -&gt; 取消请求模块 ‘axios/lib/core/Axios.js’ -&gt; 发送请求模块 ‘axios/Defaults.js’ -&gt; 默认配置模块 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"axios","slug":"axios","permalink":"https://damao2250.github.io/tags/axios/"}]},{"title":"网页安全策略---CSP","slug":"网页安全策略-CSP","date":"2020-11-18T02:37:30.000Z","updated":"2020-11-18T03:33:17.497Z","comments":true,"path":"2020/11/18/网页安全策略-CSP/","link":"","permalink":"https://damao2250.github.io/2020/11/18/%E7%BD%91%E9%A1%B5%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5-CSP/","excerpt":"","text":"Content Security Policy （网页安全策略或内容安全策略，简称 CSP)，主要用于检测并削弱某些特定类型的攻击，如跨站脚本(xss)、数据注入攻击等，相当于是让浏览器自动禁止外部注入恶意脚本 CSP的实质就是白名单制度，开发者明确告诉客户端，哪些外部资源可以加载和执行，它的实现和执行全部由浏览器完成，开发者只需要提供配置 两种启用CSP方式 ①通过HTTP头部信息的Content-Security-Policy字段添加指定策略1Content-Security-Policy: script-src 'self'; boject-src 'none'; style-src cdn.example.org third-party.org; child-src https: ②通过网页的&lt;meta&gt;标签1&lt;meta http-equiv='Content-Security-Policy' content=\"script-src 'self'; boject-src 'none'; style-src cdn.example.org third-party.org; child-src https:\"&gt; 以上代码的配置信息： 脚本：只信任当前域名 标签，不信任任何URL，即不加载任何资源 样式表：只信任cdn.example.org third-party.org 框架(frame)：必须使用HTTPS协议加载 其他资源：没有限制 资源限制选项 script-src: 外部脚本 style-src: 样式表 img-src: 图片 media-src: 媒体文件 font-src: 字体文件 object-src: 插件，如Flash child-src: 框架 frame-ancestors: 嵌入的外部资源，如：frame、iframe content-src: HTTP连接（通过XHR、WebSockets） worker-src: worker脚本 manifest-src: manifest文件 default-src 选项 用来限制各个选项的默认值1Content-Security-Policy: default-src 'self' 以上代码限制所有资源只能从当前域名加载 参考 http://www.ruanyifeng.com/blog/2016/09/csp.html https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"CSP","slug":"CSP","permalink":"https://damao2250.github.io/tags/CSP/"}]},{"title":"Github搜索技巧","slug":"Github搜索技巧","date":"2020-11-12T01:13:22.000Z","updated":"2020-11-12T04:45:24.903Z","comments":true,"path":"2020/11/12/Github搜索技巧/","link":"","permalink":"https://damao2250.github.io/2020/11/12/Github%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/","excerpt":"","text":"搜索关键字 Vue in:name 表示在项目名称中搜索 Vue 关键字 Vue in:readme 表示在项目readme中搜索 Vue 关键字 Vue in:description 表示在 项目描述中搜索 Vue 关键字 Vue in:USERNAME 表示在USERNAME中搜索 Vue 关键字 Vue in:ORGNAME 表示在组织或机构名中搜索 Vue 关键字 按照项目大小搜索 size:&gt;=5000 Vue 搜索大小超过5M 的包含 Vue 关键字项目 按照Stars量搜索 stars:&gt;1000 搜索Stars量大于1000的项目 Vue stars:&gt;1000 搜索Stars量大于1000的Vue项目 language:Vue stars:&gt;10000搜索开发语言为Vue且stars数大于10000的所有项目 按照语言搜索 language:Vue location:china 搜索国内的开发者，语言限定为Vue Github高级搜索 https://github.com/search/advanced 每天/每周/每月热门 https://github.com/trending document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"Github","slug":"Github","permalink":"https://damao2250.github.io/tags/Github/"}]},{"title":"记录一个无聊的canvas","slug":"记录一个无聊的canvas","date":"2020-11-11T11:25:58.000Z","updated":"2020-11-11T11:41:31.913Z","comments":true,"path":"2020/11/11/记录一个无聊的canvas/","link":"","permalink":"https://damao2250.github.io/2020/11/11/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E6%97%A0%E8%81%8A%E7%9A%84canvas/","excerpt":"","text":"先看效果 GIF 代码如下12345678910111213141516171819202122232425262728293031323334&lt;!-- index.html --&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; * { margin: 0; padding: 0; } #jsi-flying-fish-container { width: 100%; position: fixed; z-index: 999; bottom: 240px; left: 0; height: 250px; max-height: 250px; } &lt;/style&gt; &lt;script src=\"https://cdn.bootcdn.net/ajax/libs/jquery/2.2.0/jquery.min.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"jsi-flying-fish-container\" class=\"container\"&gt;&lt;canvas width=\"1221\" height=\"241\"&gt;&lt;/canvas&gt;&lt;/div&gt; &lt;script src=\"./fish.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335// fish.jsvar RENDERER = { POINT_INTERVAL : 5, FISH_COUNT : 300, MAX_INTERVAL_COUNT : 50, INIT_HEIGHT_RATE : 0.5, THRESHOLD : 50, init : function(){ this.setParameters(); this.reconstructMethods(); this.setup(); this.bindEvent(); this.render(); }, setParameters : function(){ this.$window = $(window); this.$container = $('#jsi-flying-fish-container'); this.$canvas = $('&lt;canvas /&gt;'); this.context = this.$canvas.appendTo(this.$container).get(0).getContext('2d'); this.points = []; this.fishes = []; this.watchIds = []; }, createSurfacePoints : function(){ var count = Math.round(this.width / this.POINT_INTERVAL); this.pointInterval = this.width / (count - 1); this.points.push(new SURFACE_POINT(this, 0)); for(var i = 1; i &lt; count; i++){ var point = new SURFACE_POINT(this, i * this.pointInterval), previous = this.points[i - 1]; point.setPreviousPoint(previous); previous.setNextPoint(point); this.points.push(point); } }, reconstructMethods : function(){ this.watchWindowSize = this.watchWindowSize.bind(this); this.jdugeToStopResize = this.jdugeToStopResize.bind(this); this.startEpicenter = this.startEpicenter.bind(this); this.moveEpicenter = this.moveEpicenter.bind(this); this.reverseVertical = this.reverseVertical.bind(this); this.render = this.render.bind(this); }, setup : function(){ this.points.length = 0; this.fishes.length = 0; this.watchIds.length = 0; this.intervalCount = this.MAX_INTERVAL_COUNT; this.width = this.$container.width(); this.height = this.$container.height(); this.fishCount = this.FISH_COUNT * this.width / 500 * this.height / 500; this.$canvas.attr({width : this.width, height : this.height}); this.reverse = false; this.fishes.push(new FISH(this)); this.createSurfacePoints(); }, watchWindowSize : function(){ this.clearTimer(); this.tmpWidth = this.$window.width(); this.tmpHeight = this.$window.height(); this.watchIds.push(setTimeout(this.jdugeToStopResize, this.WATCH_INTERVAL)); }, clearTimer : function(){ while(this.watchIds.length &gt; 0){ clearTimeout(this.watchIds.pop()); } }, jdugeToStopResize : function(){ var width = this.$window.width(), height = this.$window.height(), stopped = (width == this.tmpWidth &amp;&amp; height == this.tmpHeight); this.tmpWidth = width; this.tmpHeight = height; if(stopped){ this.setup(); } }, bindEvent : function(){ this.$window.on('resize', this.watchWindowSize); this.$container.on('mouseenter', this.startEpicenter); this.$container.on('mousemove', this.moveEpicenter); this.$container.on('click', this.reverseVertical); }, getAxis : function(event){ var offset = this.$container.offset(); return { x : event.clientX - offset.left + this.$window.scrollLeft(), y : event.clientY - offset.top + this.$window.scrollTop() }; }, startEpicenter : function(event){ this.axis = this.getAxis(event); }, moveEpicenter : function(event){ var axis = this.getAxis(event); if(!this.axis){ this.axis = axis; } this.generateEpicenter(axis.x, axis.y, axis.y - this.axis.y); this.axis = axis; }, generateEpicenter : function(x, y, velocity){ if(y &lt; this.height / 2 - this.THRESHOLD || y &gt; this.height / 2 + this.THRESHOLD){ return; } var index = Math.round(x / this.pointInterval); if(index &lt; 0 || index &gt;= this.points.length){ return; } this.points[index].interfere(y, velocity); }, reverseVertical : function(){ this.reverse = !this.reverse; for(var i = 0, count = this.fishes.length; i &lt; count; i++){ this.fishes[i].reverseVertical(); } }, controlStatus : function(){ for(var i = 0, count = this.points.length; i &lt; count; i++){ this.points[i].updateSelf(); } for(var i = 0, count = this.points.length; i &lt; count; i++){ this.points[i].updateNeighbors(); } if(this.fishes.length &lt; this.fishCount){ if(--this.intervalCount == 0){ this.intervalCount = this.MAX_INTERVAL_COUNT; this.fishes.push(new FISH(this)); } } }, render : function(){ requestAnimationFrame(this.render); this.controlStatus(); this.context.clearRect(0, 0, this.width, this.height); this.context.fillStyle = '#0184b2'; for(var i = 0, count = this.fishes.length; i &lt; count; i++){ this.fishes[i].render(this.context); } this.context.save(); this.context.globalCompositeOperation = 'xor'; this.context.beginPath(); this.context.moveTo(0, this.reverse ? 0 : this.height); for(var i = 0, count = this.points.length; i &lt; count; i++){ this.points[i].render(this.context); } this.context.lineTo(this.width, this.reverse ? 0 : this.height); this.context.closePath(); this.context.fill(); this.context.restore(); }};var SURFACE_POINT = function(renderer, x){ this.renderer = renderer; this.x = x; this.init();};SURFACE_POINT.prototype = { SPRING_CONSTANT : 0.03, SPRING_FRICTION : 0.9, WAVE_SPREAD : 0.3, ACCELARATION_RATE : 0.01, init : function(){ this.initHeight = this.renderer.height * this.renderer.INIT_HEIGHT_RATE; this.height = this.initHeight; this.fy = 0; this.force = {previous : 0, next : 0}; }, setPreviousPoint : function(previous){ this.previous = previous; }, setNextPoint : function(next){ this.next = next; }, interfere : function(y, velocity){ this.fy = this.renderer.height * this.ACCELARATION_RATE * ((this.renderer.height - this.height - y) &gt;= 0 ? -1 : 1) * Math.abs(velocity); }, updateSelf : function(){ this.fy += this.SPRING_CONSTANT * (this.initHeight - this.height); this.fy *= this.SPRING_FRICTION; this.height += this.fy; }, updateNeighbors : function(){ if(this.previous){ this.force.previous = this.WAVE_SPREAD * (this.height - this.previous.height); } if(this.next){ this.force.next = this.WAVE_SPREAD * (this.height - this.next.height); } }, render : function(context){ if(this.previous){ this.previous.height += this.force.previous; this.previous.fy += this.force.previous; } if(this.next){ this.next.height += this.force.next; this.next.fy += this.force.next; } context.lineTo(this.x, this.renderer.height - this.height); }};var FISH = function(renderer){ this.renderer = renderer; this.init();};FISH.prototype = { GRAVITY : 0.4, init : function(){ this.direction = Math.random() &lt; 0.5; this.x = this.direction ? (this.renderer.width + this.renderer.THRESHOLD) : -this.renderer.THRESHOLD; this.previousY = this.y; this.vx = this.getRandomValue(4, 10) * (this.direction ? -1 : 1); if(this.renderer.reverse){ this.y = this.getRandomValue(this.renderer.height * 1 / 10, this.renderer.height * 4 / 10); this.vy = this.getRandomValue(2, 5); this.ay = this.getRandomValue(0.05, 0.2); }else{ this.y = this.getRandomValue(this.renderer.height * 6 / 10, this.renderer.height * 9 / 10); this.vy = this.getRandomValue(-5, -2); this.ay = this.getRandomValue(-0.2, -0.05); } this.isOut = false; this.theta = 0; this.phi = 0; }, getRandomValue : function(min, max){ return min + (max - min) * Math.random(); }, reverseVertical : function(){ this.isOut = !this.isOut; this.ay *= -1; }, controlStatus : function(context){ this.previousY = this.y; this.x += this.vx; this.y += this.vy; this.vy += this.ay; if(this.renderer.reverse){ if(this.y &gt; this.renderer.height * this.renderer.INIT_HEIGHT_RATE){ this.vy -= this.GRAVITY; this.isOut = true; }else{ if(this.isOut){ this.ay = this.getRandomValue(0.05, 0.2); } this.isOut = false; } }else{ if(this.y &lt; this.renderer.height * this.renderer.INIT_HEIGHT_RATE){ this.vy += this.GRAVITY; this.isOut = true; }else{ if(this.isOut){ this.ay = this.getRandomValue(-0.2, -0.05); } this.isOut = false; } } if(!this.isOut){ this.theta += Math.PI / 20; this.theta %= Math.PI * 2; this.phi += Math.PI / 30; this.phi %= Math.PI * 2; } this.renderer.generateEpicenter(this.x + (this.direction ? -1 : 1) * this.renderer.THRESHOLD, this.y, this.y - this.previousY); if(this.vx &gt; 0 &amp;&amp; this.x &gt; this.renderer.width + this.renderer.THRESHOLD || this.vx &lt; 0 &amp;&amp; this.x &lt; -this.renderer.THRESHOLD){ this.init(); } }, render : function(context){ context.save(); context.translate(this.x, this.y); context.rotate(Math.PI + Math.atan2(this.vy, this.vx)); context.scale(1, this.direction ? 1 : -1); context.beginPath(); context.moveTo(-30, 0); context.bezierCurveTo(-20, 15, 15, 10, 40, 0); context.bezierCurveTo(15, -10, -20, -15, -30, 0); context.fill(); context.save(); context.translate(40, 0); context.scale(0.9 + 0.2 * Math.sin(this.theta), 1); context.beginPath(); context.moveTo(0, 0); context.quadraticCurveTo(5, 10, 20, 8); context.quadraticCurveTo(12, 5, 10, 0); context.quadraticCurveTo(12, -5, 20, -8); context.quadraticCurveTo(5, -10, 0, 0); context.fill(); context.restore(); context.save(); context.translate(-3, 0); context.rotate((Math.PI / 3 + Math.PI / 10 * Math.sin(this.phi)) * (this.renderer.reverse ? -1 : 1)); context.beginPath(); if(this.renderer.reverse){ context.moveTo(5, 0); context.bezierCurveTo(10, 10, 10, 30, 0, 40); context.bezierCurveTo(-12, 25, -8, 10, 0, 0); }else{ context.moveTo(-5, 0); context.bezierCurveTo(-10, -10, -10, -30, 0, -40); context.bezierCurveTo(12, -25, 8, -10, 0, 0); } context.closePath(); context.fill(); context.restore(); context.restore(); this.controlStatus(context); }};$(function(){ RENDERER.init();}); document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"canvas","slug":"canvas","permalink":"https://damao2250.github.io/tags/canvas/"}]},{"title":"基于Element-Ui的select二次封装的下拉搜索组件","slug":"基于Element-Ui的select二次封装的下拉搜索组件","date":"2020-11-09T02:51:56.000Z","updated":"2020-11-09T03:02:34.110Z","comments":true,"path":"2020/11/09/基于Element-Ui的select二次封装的下拉搜索组件/","link":"","permalink":"https://damao2250.github.io/2020/11/09/%E5%9F%BA%E4%BA%8EElement-Ui%E7%9A%84select%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85%E7%9A%84%E4%B8%8B%E6%8B%89%E6%90%9C%E7%B4%A2%E7%BB%84%E4%BB%B6/","excerpt":"","text":"少了罗嗦，直接看代码 注意代码不能直接使用，只是提供一种封装思路，其中 dSearchList 及样式需要自己重新写, dCountryList 来自 dropListMixin 还有很多方法并未加进来，可根据实际自行添加 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100// select/index.vue&lt;template&gt;&nbsp;&nbsp;&lt;div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;el-select&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:value=\"value\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:placeholder=\"placeholder\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:style=\"customStyle\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:class=\"customClass\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remote&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:size=\"size\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:remote-method=\"dSearchList('countryList')\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:loading=\"dLoading\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@input=\"onChange($event)\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@change=\"(val)&nbsp;=&gt;&nbsp;onSelectChange(val)\"&nbsp;&nbsp;&nbsp;&nbsp;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;el-option&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v-for=\"item&nbsp;in&nbsp;dCountryList\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:key=\"item[optionKey]\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:label=\"item[optionLabel]\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:value=\"item[optionValue]\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=\"d-f&nbsp;f-jc-sb\"&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&gt;{{&nbsp;item.code&nbsp;||&nbsp;\"\"&nbsp;}}&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&gt;{{&nbsp;item.name&nbsp;||&nbsp;\"\"&nbsp;}}&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&gt;{{&nbsp;item.numCode&nbsp;||&nbsp;\"\"&nbsp;}}&lt;/span&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/el-option&gt;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/el-select&gt;&nbsp;&nbsp;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import&nbsp;{&nbsp;dropListMixin&nbsp;}&nbsp;from&nbsp;\"@/mixins/drop_list_mixin\";export&nbsp;default&nbsp;{&nbsp;&nbsp;mixins:&nbsp;[dropListMixin],&nbsp;&nbsp;props:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;String,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;\"\",&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;placeholder:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;String,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;\"请输入\",&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;customStyle:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;String,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;\"width:&nbsp;100%;\",&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;customClass:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;String,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;\"\",&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;clearable:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;Boolean,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;true,&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;size:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;String,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;\"small\",&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;optionKey:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;String,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;\"code\",&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;optionLabel:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;String,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;\"name\",&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;optionValue:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;String,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:&nbsp;\"code\",&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;},&nbsp;&nbsp;data()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{}&nbsp;&nbsp;},&nbsp;&nbsp;created()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;this.dInit([\"countryList\"]);&nbsp;&nbsp;},&nbsp;&nbsp;methods:&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;onChange(val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.$emit(\"input\",&nbsp;val);&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;&nbsp;&nbsp;onSelectChange(val)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.$emit(\"selectChange\",&nbsp;val);&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;&nbsp;},};&lt;/script&gt;// &nbsp;&nbsp;使用示例&nbsp;&nbsp;&nbsp;&lt;country-select&nbsp;:size=\"medium\"&nbsp;v-model=\"formData.countryCode\"&nbsp;@selectChange=\"val&nbsp;=&gt;&nbsp;onCountrySelect(val,'countryCode')\"&nbsp;&gt;&lt;/country-select&gt;&nbsp;// &nbsp;&nbsp;使用示例 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"Element-ui","slug":"Element-ui","permalink":"https://damao2250.github.io/tags/Element-ui/"}]},{"title":"关于js中对小数的计算","slug":"关于js中对小数的计算","date":"2020-10-03T13:12:01.000Z","updated":"2020-10-03T13:34:30.286Z","comments":true,"path":"2020/10/03/关于js中对小数的计算/","link":"","permalink":"https://damao2250.github.io/2020/10/03/%E5%85%B3%E4%BA%8Ejs%E4%B8%AD%E5%AF%B9%E5%B0%8F%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97/","excerpt":"","text":"在js的小数计算中，0.1+0.2=0.30000000000000004 12345let num1 = 0.1;let num2 = 0.2;console.log( num1 + num2 );// 0.30000000000000004 为什么出现这样的结果，我们把小数转换成计算机能读得懂的二进制就比较明了了 0.1 -&gt; 0.1.toString(2) -&gt; 0.0001100110011001100110011001100110011001100110011001101(无限循环…)0.2 -&gt; 0.1.toString(2) -&gt; 0.001100110011001100110011001100110011001100110011001101(无限循环…) 双精度浮点数的小数部分最多支持 52 位，所以两者相加之后得到这么一串 0.0100110011001100110011001100110011001100110011001100 因浮点数小数位的限制而截断的二进制数字，这时候，我们再把它转换为十进制，就成了 0.30000000000000004。 所以我们该如何处理此类问题？ 为了避免产生精度差异，我们要把需要计算的数字乘以 10 的 n 次幂，换算成计算机能够精确识别的整数，然后再除以 10 的 n 次幂，大部分编程语言都是这样处理精度差异的，我们就借用过来处理一下 JS 中的浮点数精度误差。 123456789formatNum = function( num, digit ) { let m = Math.pow( 10, digit ); return parseInt( num * m, 10 ) / m;}let num1 = 0.1;let num2 = 0.2;console.log( num1 + num2 );console.log( formatNum( num1 + num2, 1) ); 123// Tips:// pow() 方法可返回 x 的 y 次幂的值。// parseInt() 函数可解析一个字符串，并返回一个整数。（第二个参数取值2-36，省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。） document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"https://damao2250.github.io/tags/JS/"}]},{"title":"使用SVG实现边框特效及绘制图形","slug":"使用SVG实现边框特效及绘制图形","date":"2020-06-16T06:58:41.000Z","updated":"2020-06-16T07:21:24.040Z","comments":true,"path":"2020/06/16/使用SVG实现边框特效及绘制图形/","link":"","permalink":"https://damao2250.github.io/2020/06/16/%E4%BD%BF%E7%94%A8SVG%E5%AE%9E%E7%8E%B0%E8%BE%B9%E6%A1%86%E7%89%B9%E6%95%88%E5%8F%8A%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2/","excerpt":"","text":"SVG SVG 指可伸缩矢量图形 (Scalable Vector Graphics) SVG 用来定义用于网络的基于矢量的图形 SVG 使用 XML 格式定义图形 SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失 SVG 是万维网联盟的标准 SVG 与诸如 DOM 和 XSL 之类的 W3C 标准是一个整体 SVG绘制矩形和圆角矩形– rect:绘制矩形标签; x:矩形的左侧位置,定义矩形到&lt;svg&gt;左侧的距离是Xpx; y:矩形的顶端位置,定义矩形到&lt;svg&gt;顶部的距离是Ypx; rx/ry:是圆角半径; style: fill:填充颜色; fill-opacity:填充颜色透明度; stroke:描边颜色; stroke-Width:描边宽度; stroke-opacity:描边透明度; SVG绘制椭圆– ellipse:绘制椭圆标签; cx:定义椭圆中心的X坐标; cy:定义椭圆中心的Y坐标; rx:定义椭圆的水平半径; ry:定义椭圆的垂直半径; SVG绘制直线– line:绘制直线标签; x1:直线起始点X坐标; y1:直线起始点Y坐标; x2:直线终止点X坐标; y2:直线终止点Y坐标; demo .svg-content{ padding: 20px; height: 100%; display: flex; justify-content: center; align-items: center; background: #696969; } .svg-main { width: 200px; } svg { width: 200px; height: 50px; margin-bottom: 20px; background: #444; cursor: default; } rect#shape { fill: transparent; stroke: white; stroke-width: 6px; stroke-dasharray: 0 500; stroke-dashoffset: 0; transition: 0.5s ease; } svg:hover #shape { stroke-dasharray: 500 0; stroke-width: 6px; stroke: rgb(32, 213, 226); } @keyframes dong { 100% { stroke-dasharray: 500 0; stroke-width: 6px; stroke: white; } } rect#one { fill: transparent; stroke: yellowgreen; stroke-width: 6px; stroke-dasharray: 0 500; stroke-dashoffset: 250; animation: dong1 2s ease-in-out infinite alternate; } @keyframes dong1 { 100% { stroke-dasharray: 500 0; stroke-width: 6px; stroke: greenyellow; } } rect#two { fill: transparent; stroke: rgb(233, 43, 43); stroke-width: 6px; stroke-dasharray: 200 300; stroke-dashoffset: 250; animation: dong2 2s ease-in-out infinite alternate; } @keyframes dong2 { 100% { stroke-dasharray: 200 0; stroke-width: 6px; stroke: rgb(233, 43, 43); } } rect#three { fill: transparent; stroke: rgb(233, 220, 43); stroke-width: 6px; stroke-dasharray: 50 450; stroke-dashoffset: 50; animation: dong3 2s ease-in-out infinite alternate; } rect#threes { fill: transparent; stroke: rgb(233, 103, 43); stroke-width: 6px; stroke-dasharray: 50 450; stroke-dashoffset: -200; animation: dong3 2s ease-in-out infinite alternate; } @keyframes dong3 { 100% { stroke-dasharray: 500 0; stroke-width: 6px; stroke: rgb(233, 220, 43); } } rect#four { fill: transparent; stroke: skyblue; stroke-width: 6px; stroke-dasharray: 50 450; stroke-dashoffset: 150; transition: 0.5s ease; } svg:hover #four { stroke-dasharray: 250 250; } rect#fours { fill: transparent; stroke: blue; stroke-width: 6px; stroke-dasharray: 50 450; stroke-dashoffset: 200; transition: 0.5s ease; } svg:hover #fours { stroke-dasharray: 250 50; } text { fill: white; font-size: 30px; transition: 0.5s linear; } svg:hover text { fill: rgb(30, 129, 223); } svg:hover .four { fill: rgb(231, 105, 21); } #five { fill: transparent; stroke: rgb(255, 0, 179); stroke-width: 6px; stroke-dasharray: 50 400; stroke-dashoffset: -75; stroke-opacity: 0; animation: dong5 1s linear infinite alternate; } @keyframes dong5 { 100% { stroke-opacity: 1; stroke: rgb(192, 44, 180); stroke-dasharray: 50 20; } } #six { fill: transparent; stroke: rgb(0, 255, 21); stroke-width: 6px; stroke-dasharray: 50 400; stroke-dashoffset: 50; animation: dong6 1s linear infinite alternate; } @keyframes dong6 { 100% { stroke: rgb(231, 250, 59); stroke-dasharray: 20 1; } } rect#svg-border { fill: transparent; stroke: white; stroke-width: 6px; stroke-dasharray: 0, 200, 0, 50, 0, 200, 0, 50; stroke-dashoffset: 0; transition: all .3s ease; } svg:hover #svg-border { stroke-dasharray: 200, 0, 50, 0, 200, 0, 50, 0; stroke-width: 6px; stroke: #58bc58; } 百度 淘宝 四边框 完整代码lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; body, html { height: 100%; display: flex; justify-content: center; align-items: center; background: #696969; } main { width: 200px; } svg { width: 200px; height: 50px; margin-bottom: 20px; background: #444; cursor: default; } rect#shape { fill: transparent; stroke: white; stroke-width: 6px; stroke-dasharray: 0 500; stroke-dashoffset: 0; transition: 0.5s ease; /* animation:dong 2s ease-in-out infinite alternate; */ } svg:hover #shape { stroke-dasharray: 500 0; stroke-width: 6px; stroke: rgb(32, 213, 226); } @keyframes dong { 100% { stroke-dasharray: 500 0; stroke-width: 6px; /* stroke-dashoffset:-250; */ stroke: white; } } rect#one { fill: transparent; stroke: yellowgreen; stroke-width: 6px; stroke-dasharray: 0 500; stroke-dashoffset: 250; animation: dong1 2s ease-in-out infinite alternate; } @keyframes dong1 { 100% { stroke-dasharray: 500 0; stroke-width: 6px; /* stroke-dashoffset:0; */ stroke: greenyellow; } } rect#two { fill: transparent; stroke: rgb(233, 43, 43); stroke-width: 6px; stroke-dasharray: 200 300; stroke-dashoffset: 250; animation: dong2 2s ease-in-out infinite alternate; } @keyframes dong2 { 100% { stroke-dasharray: 200 0; stroke-width: 6px; /* stroke-dashoffset:0; */ stroke: rgb(233, 43, 43); } } rect#three { fill: transparent; stroke: rgb(233, 220, 43); stroke-width: 6px; stroke-dasharray: 50 450; stroke-dashoffset: 50; animation: dong3 2s ease-in-out infinite alternate; } rect#threes { fill: transparent; stroke: rgb(233, 103, 43); stroke-width: 6px; stroke-dasharray: 50 450; stroke-dashoffset: -200; animation: dong3 2s ease-in-out infinite alternate; } @keyframes dong3 { 100% { stroke-dasharray: 500 0; stroke-width: 6px; /* stroke-dashoffset:-250; */ stroke: rgb(233, 220, 43); } } rect#four { fill: transparent; stroke: skyblue; stroke-width: 6px; stroke-dasharray: 50 450; stroke-dashoffset: 150; transition: 0.5s ease; /* animation:dong4 2s ease infinite alternate; */ } svg:hover #four { stroke-dasharray: 250 250; } rect#fours { fill: transparent; stroke: blue; stroke-width: 6px; stroke-dasharray: 50 450; stroke-dashoffset: 200; transition: 0.5s ease; /* animation:dong4s 2s ease infinite alternate; */ } svg:hover #fours { stroke-dasharray: 250 50; } @keyframes dong4 { 100% { stroke-dasharray: 250 250; } } @keyframes dong4s { 100% { stroke-dasharray: 250 50; } } text { fill: white; font-size: 30px; transition: 0.5s linear; } svg:hover text { fill: rgb(30, 129, 223); } svg:hover .four { fill: rgb(231, 105, 21); } #five { fill: transparent; stroke: rgb(255, 0, 179); stroke-width: 6px; stroke-dasharray: 50 400; stroke-dashoffset: -75; stroke-opacity: 0; animation: dong5 1s linear infinite alternate; } @keyframes dong5 { 100% { stroke-opacity: 1; stroke: rgb(192, 44, 180); stroke-dasharray: 50 20; } } #six { fill: transparent; stroke: rgb(0, 255, 21); stroke-width: 6px; stroke-dasharray: 50 400; stroke-dashoffset: 50; animation: dong6 1s linear infinite alternate; } @keyframes dong6 { 100% { stroke: rgb(231, 250, 59); stroke-dasharray: 20 1; } } rect#svg-border { fill: transparent; stroke: white; stroke-width: 6px; stroke-dasharray: 0, 200, 0, 50, 0, 200, 0, 50; stroke-dashoffset: 0; transition: all .3s ease; } svg:hover #svg-border { stroke-dasharray: 200, 0, 50, 0, 200, 0, 50, 0; stroke-width: 6px; stroke: #58bc58; } &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;main&gt; &lt;svg&gt; &lt;rect id=\"shape\" height=\"50\" width=\"200\"&gt;&lt;/rect&gt; &lt;text x=\"70\" y=\"35\"&gt;&lt;a href=\"###\"&gt;百度&lt;/a&gt;&lt;/text&gt; &lt;/svg&gt; &lt;svg&gt; &lt;rect id=\"one\" height=\"50\" width=\"200\"&gt;&lt;/rect&gt; &lt;/svg&gt; &lt;svg&gt; &lt;rect id=\"two\" height=\"50\" width=\"200\"&gt;&lt;/rect&gt; &lt;/svg&gt; &lt;svg&gt; &lt;rect id=\"three\" height=\"50\" width=\"200\"&gt;&lt;/rect&gt; &lt;rect id=\"threes\" height=\"50\" width=\"200\"&gt;&lt;/rect&gt; &lt;/svg&gt; &lt;svg&gt; &lt;rect id=\"fours\" height=\"50\" width=\"200\"&gt;&lt;/rect&gt; &lt;rect id=\"four\" height=\"50\" width=\"200\"&gt;&lt;/rect&gt; &lt;text class=\"four\" x=\"70\" y=\"35\"&gt;&lt;a href=\"###\"&gt;淘宝&lt;/a&gt;&lt;/text&gt; &lt;/svg&gt; &lt;svg&gt; &lt;rect id=\"five\" height=\"50\" width=\"200\"&gt;&lt;/rect&gt; &lt;/svg&gt; &lt;svg&gt; &lt;rect id=\"six\" height=\"50\" width=\"200\"&gt;&lt;/rect&gt; &lt;/svg&gt; &lt;svg&gt; &lt;rect id=\"svg-border\" height=\"50\" width=\"200\"&gt;&lt;/rect&gt; &lt;text x=\"55\" y=\"35\"&gt;&lt;a href=\"###\"&gt;四边框&lt;/a&gt;&lt;/text&gt; &lt;/svg&gt; &lt;svg&gt; &lt;circle cx=\"100\" cy=\"25\" r=\"20\" stroke=\"orange\" stroke-width=\"6\" fill=\"#ff5\" /&gt; &lt;/svg&gt; &lt;svg&gt; &lt;rect x=\"25\" y=\"10\" width=\"150\" height=\"30\" style=\"fill:#ccc; stroke:orange; stroke-width:5px;\" /&gt; &lt;/svg&gt; &lt;svg&gt; &lt;rect x=\"25\" y=\"10\" rx=\"15\" ry=\"15\" width=\"150\" height=\"30\" style=\"fill:#ccc; stroke:orange; stroke-width:5px; stroke-opacity:.5; fill-opacity:.9;\" /&gt; &lt;/svg&gt; &lt;svg &gt; &lt;line x1=\"5\" y1=\"5\" x2=\"190\" y2=\"40\" style=\"stroke:rgba(255, 0, 0, .5); stroke-width:5px;\" /&gt; &lt;/svg&gt; &lt;svg&gt; &lt;ellipse cx=\"100\" cy=\"25\" rx=\"50\" ry=\"15\" stroke=\"orange\" stroke-width=\"5\" fill=\"#000\" fill-opacity=\".5\" /&gt; &lt;/svg&gt; &lt;/main&gt;&lt;/body&gt;&lt;/html&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"SVG","slug":"SVG","permalink":"https://damao2250.github.io/tags/SVG/"}]},{"title":"用Element-Ui封装一个滑动组件","slug":"用Element-Ui封装一个滑动组件","date":"2020-06-06T03:37:00.000Z","updated":"2020-06-07T05:17:31.305Z","comments":true,"path":"2020/06/06/用Element-Ui封装一个滑动组件/","link":"","permalink":"https://damao2250.github.io/2020/06/06/%E7%94%A8Element-Ui%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E6%BB%91%E5%8A%A8%E7%BB%84%E4%BB%B6/","excerpt":"","text":"基于Element-Ui的“Slider滑块”组件封装一个前端滑动滑动验证组件 主要用于登录验证 纯前端验证（滑着过瘾）目前无法与后端进行校验 封装还可以优化 直接看代码吧 slider组件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232// slider/index.vue'&lt;template&gt; &lt;div class=\"bar\" ref=\"bar\"&gt; &lt;el-slider class=\"slider\" ref=\"slider\" v-model=\"value\" :show-tooltip=\"false\" @change=\"sliderChange\" :disabled=\"sliderDisabled\" &gt;&lt;/el-slider&gt; &lt;div class=\"slider-text-before\" ref=\"barText\"&gt; &lt;div :class=\"noReset?'run run-no-slider':'run'\" v-if=\"!isSuccess\"&gt;拖动滑块验证&lt;/div&gt; &lt;span v-else style=\"color:#fff;\"&gt;验证通过&lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default { name: \"slider\", props: { reset: { type: Boolean, default: false }, noReset: { type: Boolean, default: false, } }, data() { return { value: 0, isSuccess: false, sliderDisabled: false }; }, watch: { reset: function(val) { if (val) { this.sliderReset(); } }, noReset(val){ if(val){ this.$refs.bar.classList.add(\"no-slider\") }else{ this.$refs.bar.classList.remove(\"no-slider\") } }, value(val){ this.$emit(\"value\",val) } }, created() { }, mounted() { console.log(this.$refs.slider.$refs.button1.$refs.button) // this.$refs.slider.$refs.button1.$refs.button.style = \"\" this.$refs.slider.$refs.button1.$refs.button.lastChild.innerHTML = \"&lt;i class='el-icon-d-arrow-right icon-arrow-right'&gt;&lt;/i&gt;\"; }, methods: { sliderChange(val) { if (val === 100) { this.sliderSucceed(); } else { this.sliderReset(); } }, sliderSucceed() { this.isSuccess = true; this.$refs.slider.$refs.button1.$refs.button.lastChild.innerHTML = \"&lt;i class='el-icon-success icon-success'&gt;&lt;/i&gt;\"; this.sliderDisabled = true; this.$emit(\"success\", true); }, sliderReset() { this.isSuccess = false; this.value = 0; this.sliderDisabled = false; this.$emit(\"update:reset\", false); this.$refs.slider.$refs.button1.$refs.button.lastChild.innerHTML = \"&lt;i class='el-icon-d-arrow-right icon-arrow-right'&gt;&lt;/i&gt;\"; } }};&lt;/script&gt;&lt;style lang=\"scss\" scoped&gt;$color: #67c23a;// $color: #409EFF;$slider_button_width: 60px;$slider_button_height: 40px;.bar { position: relative; width: 100%; background-color: #e4e7ed; border-radius: 3px; .slider-text-before { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); font-size: 16px; letter-spacing: 2px; user-select: none; .run { padding: 0 30px; color: transparent; -moz-user-select: none; -webkit-user-select: none; user-select: none; -o-user-select: none; -ms-user-select: none; background: -webkit-gradient( linear, left top, right top, color-stop(0, #333), color-stop(0.3, #333), color-stop(0.5, #fff), color-stop(0.7, #333), color-stop(1, #333) ); -webkit-background-clip: text; -webkit-text-fill-color: transparent; -webkit-text-size-adjust: none; -webkit-animation: slidetounlock 3s infinite; animation: slidetounlock 3s infinite; } .run-no-slider{ background: -webkit-gradient( linear, left top, right top, color-stop(0, #F56C6C), color-stop(0.3, #F56C6C), color-stop(0.5, #fff), color-stop(0.7, #F56C6C), color-stop(1, #F56C6C) ); -webkit-background-clip: text; -webkit-text-fill-color: transparent; -webkit-text-size-adjust: none; -webkit-animation: slidetounlock 3s infinite; animation: slidetounlock 3s infinite; } } .slider-text-after { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); z-index: 10; color: #fff; } .slider { width: calc(100% - #{$slider_button_width}); /deep/.el-slider__runway { margin: 0; } /deep/.el-slider__bar { height: 40px; background-color: $color; border-top-left-radius: 0px; border-bottom-left-radius: 0px; } /deep/.el-slider__runway { height: 40px; } /deep/.el-slider__button-wrapper { top: 0; width: $slider_button_width; height: 40px; margin-left: ($slider_button_width/2); :hover { transform: none; } } /deep/.el-slider__button { width: $slider_button_width; height: 40px; border-radius: 0; border-color: #dcdfe6; :hover { transform: none; } } /deep/.el-slider__button.dragging, .el-slider__button.hover, .el-slider__button:hover { -webkit-transform: none !important; transform: none !important; } /deep/.el-slider__runway.disabled .el-slider__button:hover { cursor: grab !important; } /deep/.icon-arrow-right { line-height: ($slider_button_height - 4px); font-size: 18px; color: #4c4c4c; } /deep/.icon-success { line-height: ($slider_button_height - 4px); font-size: 20px; color: $color; } }}@-webkit-keyframes slidetounlock { from { background-position: -70px 100%; } to { background-position: 80px 0; }}.no-slider{ animation: shake 800ms ease-in-out;}@keyframes shake { 10%, 90% { transform: translate3d(-1px, 0, 0); } 20%, 80% { transform: translate3d(+2px, 0, 0); } 30%, 70% { transform: translate3d(-4px, 0, 0); } 40%, 60% { transform: translate3d(+4px, 0, 0); } 50% { transform: translate3d(-4px, 0, 0); }}&lt;/style&gt; 使用12345678910111213141516171819202122232425262728293031323334353637383940414243// 引入import slider from './slider'// 使用 &lt;slider v-bind:reset.sync=\"isResetSlider\" :noReset=\"isNoReset\" @value=\"sliderValue\" @success=\"sliderSuccess\"&gt;&lt;/slider&gt;components:{ slider},data() { return { isResetSlider: false, isSeccess: false, sliderVal: \"\", isNoReset: false };}methods: { // 滑动验证 sliderSuccess(val){ this.isSeccess = val }, sliderValue(val){ this.sliderVal = val }, submitForm() { if(this.sliderVal == 0){ this.isNoReset = true setTimeout(() =&gt; { this.isNoReset = false }, 900); return } if(this.isSeccess){ console.log(\"submit\"); this.isResetSlider = true this.isSeccess = false }else{ console.log(\"请滑动滑块验证\"); } }} 效果截图 滑动验证-未滑动 滑动验证-滑动中 滑动验证-滑动成功 滑动验证GIF document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"Element-ui","slug":"Element-ui","permalink":"https://damao2250.github.io/tags/Element-ui/"}]},{"title":"Vue简介","slug":"Vue简介","date":"2020-05-19T00:36:20.000Z","updated":"2020-05-21T09:53:53.886Z","comments":true,"path":"2020/05/19/Vue简介/","link":"","permalink":"https://damao2250.github.io/2020/05/19/Vue%E7%AE%80%E4%BB%8B/","excerpt":"","text":"Vue是什么？ Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。 渐进式：声明式渲染 -&gt; 组件系统 -&gt; 客户端路由 -&gt; 大规模状态管理 -&gt; 构建工具 声明式渲染 与 响应式触发 使用模板语法 声明式地将数据渲染进DOM，叫声明式渲染。即DOM状态只是数据状态的一个映射。 如果属性的状态值发生了变化，无须做任何操作，与dom绑定的属性会自动发生改变，叫属性的响应式触发。 组件系统：将一个大型的界面切分成一个一个更小的可控单元，具有可复用性。 客户端路由：针对单页应用而言，需要有路由让一个URL对应到一个应用的状态。 状态管理：大型项目设计涉及多个组件之间的数据共享 构建工具：Vue官方提供了一个构建工具vue-cli，可以快速安装webPack、loader等等包 Vue是前端三大框架之一 Vue的发展历程 实验阶段（2013 年中到 2014 年 2 月） 0.x 阶段 (2014 年 2 月到 2015 年 10 月) 1.x 阶段 (2015 年 10 月到 2016 年 9 月) 发行版名称 [Evangelion] 2.x 阶段 (2016 年 9 月至今) 发行版名称 [Ghost in the Shell] MVVM模式 MVVM主要把每个页面分成了M（Model）、V（View）、VM（ViewModel）。VM是其中核心，M和V间的调度者。 M: 保存的是每个页面中单独的数据保存在data里。 V: 每个页面的html结构。 VM，一个调度者，分割了M和V，M和V通过中间的VM关联。V想要保存数据到M，都要有VM做中间处理；V想要渲染页面，需要调用VM，VM从M中取数据。 前端中使用MVVM思想，主要让开发更方便，MVVM提供了数据的双向绑定（由VM提供）。 双向数据绑定 Vue双向数据绑定是通过数据劫持结合发布订阅模式的方式来实现的，也就是说数据和视图同步，数据发生变化，视图跟着变化，视图变化，数据也随之发生改变； 核心：关于VUE双向数据绑定，其核心是 Object.defineProperty()方法； 把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。 实现数据双向数据绑定 1、实现一个数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者 2、实现一个指令解析器Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数 3、实现一个Watcher，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图 12345678910111213let obj = {}Object.defineProperty( obj, \"greet\", { get: function() { console.log( \"调用 get 方法\" ) }, set: function( newVal ) { console.log(\"调用 set 方法，传入的值是：\" + newVal ); obj.say = newVal; }})obj.greet; // 调用 get 方法obj.greet = \"hello\"; // 调用 set 方法，传入的值是：helloconsole.log(obj) // {say: \"hello\"} Vue生命周期 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://damao2250.github.io/tags/Vue/"}]},{"title":"01-React-Native-Windows之起步","slug":"01-React-Native-Windows之起步","date":"2020-05-14T11:53:55.000Z","updated":"2020-05-15T06:02:49.961Z","comments":true,"path":"2020/05/14/01-React-Native-Windows之起步/","link":"","permalink":"https://damao2250.github.io/2020/05/14/01-React-Native-Windows%E4%B9%8B%E8%B5%B7%E6%AD%A5/","excerpt":"","text":"React Native for Windows 0.61 起步系统要求 Windows 10 开发依赖 安装 Visual Studio 2019 安装 Visual Studio 2019 的这些选项 工作负载 -&gt; 通用 Windows 平台开发 -&gt; 勾选可选项里的 “C++ (v141)通用 Windows 平台工具” 工作负载 -&gt; 使用 C++ 的桌面开发 单个组件 -&gt; 编译器、生成工具和运行时 -&gt; MSVC v141 – VS 2017 C++ x64/x86 生成工具(v14.16) 单个组件 -&gt; 编译器、生成工具和运行时 -&gt; MSVC v141 – VS 2017 C++ ARM64 生成工具(v14.16) 单个组件 -&gt; 开发活动 -&gt; Node.js 开发工具 预计安装所需空间大小：21.64GB 安装 React Native 的开发依赖 安装标准的 React Native 开发依赖，中文文档 安装 node.js，确保node的版本是12.9.1或是更高，12.9.1是构建 React Native for Windows 推荐的版本 安装 Chrome，用于调式JS,可选 安装 Yarn，可选安装，如果你想为 react-native-windows 添砖加瓦则续安装 故障排除 如果在运行应用程序后，打包程序未更新或应用程序未显示 React Native 内容-请关闭打包程序命令提示符窗口，并确保该应用程序已打开，然后运行 yarn start 并再次从 Visual Studio 运行该应用程序。 如果您在UWP应用程序窗口中看到带有错误消息：的红色错误框，请 ERROR: Instance failed to start. A connection with the server cannot be established 确保您正在使用打包 yarn start 程序运行，然后再次运行该应用程序。 安装 React Native for Windows 在需要创建项目的目录下面执行 react-native init1234npx react-native init &lt;project name&gt; --version ^0.61.5// npx 还能避免全局安装的模块,安装模块时会下载到一个临时目录，使用以后再删除// --version ^0.61.5 指定版本号 安装 Windows 扩展 安装 React Native for Windows 软件包1234cd &lt;project name&gt; npx react-native-windows-init --overwrite// 切换到创建项目的目录下面然后安装 运行 React Native Windows 应用 运行前确保浏览器已经打开 在 VS Code 中运行 安装 VS Code 插件： React Native Tools 在应用程根目录创建文件 .vscode/launch.json，并粘贴如下内容123456789101112{ \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Debug Windows\", \"cwd\": \"${workspaceFolder}\", \"type\": \"reactnative\", \"request\": \"launch\", \"platform\": \"windows\" } ]} 运行项目123npx react-native run-windows// 第一次启动会有点慢，安装后会淡出一个命令提示符窗口，请按回车以继续 按 “r” 键可以重载应用 在 Visual Studio 中运行 在 Visual Studio 中打开解决方案文件（如：”\\windowsAppDemo\\windows\\windowsAppDemo.sln”） 如果 Visual Studio 显示无法加载，可以关闭 Visual Studio 然后重新打开 在项目目录项目下打开命令行提示符运行yarn start 在 Visual Studio 中的菜单下面选 Debug -&gt; x64 -&gt; 本地计算机（点击绿色三角按钮启动） document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"React Native for Windows","slug":"React-Native-for-Windows","permalink":"https://damao2250.github.io/tags/React-Native-for-Windows/"}]},{"title":"抽象组件实现节流/防抖","slug":"抽象组件/防抖","date":"2020-05-04T00:09:25.000Z","updated":"2020-12-31T05:36:12.464Z","comments":true,"path":"2020/05/04/抽象组件/防抖/","link":"","permalink":"https://damao2250.github.io/2020/05/04/%E6%8A%BD%E8%B1%A1%E7%BB%84%E4%BB%B6/%E9%98%B2%E6%8A%96/","excerpt":"","text":"节流/防抖 1、节流： 一个函数执行一行后，只有大于设定的执行周期后才会被执行第二次(点击事件) 有个需要频繁触发的函数，出于优化性能角度，在规定时间内，只让函数触发的第一次生效后面不生效 防抖： 一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面不生效 Vue实现函数防抖组件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// 组件const throttle = function (fn, wait = 50, isDebounce, ctx) { let timer let lastCall = 0 return function (...params) { if (isDebounce) { if (timer) clearTimeout(timer) timer = setTimeout(() =&gt; { fn.apply(ctx, params) }, wait); } else { const now = new Date().getTime() if (now - lastCall &lt; wait) return lastCall = now fn.apply(ctx, params) } }}export default { name: \"Throttle\", abstract: true, props: { time: Number, events: String, isDebounce: { type: Boolean, default: false } }, created() { this.eventKeys = this.events.split(\",\") this.originMap = {} this.throttledMap = {} }, render() { const vnode = this.$slots.default[0] this.eventKeys.forEach(key =&gt; { const target = vnode.data.on[key] if (target === this.originMap[key] &amp;&amp; this.throttledMap[key]) { vnode.data.on[key] = this.throttledMap[key] } else if (target) { this.originMap[key] = target this.throttledMap[key] = throttle(target, this.time, this.isDebounce, vnode) vnode.data.on[key] = this.throttledMap[key] } }); return vnode }} 12345678910111213141516171819202122232425262728293031323334// 通过第三个参数 isDebounce来控制切换防抖节流// 在 main.js 引入import Throttle from \"./Throttle\"Vue.component(\"Throttle\", Throttle)// 使用&lt;div id=\"app\"&gt; &lt;Throttle :timer=\"1000\" events=\"click\"&gt; &lt;botton @click=\"onClick($event, 1)\"&gt;click + 1 {{val}}&lt;/botton&gt; &lt;/Throttle&gt; &lt;Throttle :timer=\"1000\" events=\"click\" :isDebounce=\"true\"&gt; &lt;botton @click=\"onAdd\"&gt;click + 3 {{val}}&lt;/botton&gt; &lt;/Throttle&gt; &lt;Throttle :timer=\"3300\" events=\"mouseleave\" :isDebounce=\"true\"&gt; &lt;botton @mouseleave.prevent=\"onAdd\"&gt;click + 3 {{val}}&lt;/botton&gt; &lt;/Throttle&gt;&lt;/div&gt;const app = new Vue({ el: \"#app\", data() { return { val: 0 }, methods: { onClick($ev,val) { this.val = val }, onAdd() { this.val += 3 } } }}) 实现一个防抖函数12345678910111213141516// 在第一次触发事件时，不立即执行，而是在给定的时间值后，如果没有再次触发就执行，如果触发了，就取消当前的计时，然后重新计时/** * * @param {Function} fn 需要防抖的函数 * @param {Number} delay 毫秒，防抖时间值 */function debounce(fn, delay=300){ let timer = null return () =&gt; { if(timer){ clearTimeout(timer) } timer = setTimeout(fn, delay) }} 实现一个节流函数1234567891011121314151617181920212223// 类似控制阀门定期开放的函数，即让函数执行一次后，在间隔的时间里暂时失效不能再次执行，等过了间隔时间又重新激活（相当于冷却时间）/** * * @param {Function} fn 需要节流的函数 * @param {Number} delay 毫秒，节流间隔时间值 */function throttle(fn, delay=300) { let valid = true return () =&gt; { if(!valid) { // 休息时间，不执行函数 return false } // 工作时间，执行函数，并且在间隔期间内把状态设为无效 valid = false setTimeout(() =&gt; { fn() valid = true }, delay); }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://damao2250.github.io/tags/Vue/"}]},{"title":"Git分支管理策略","slug":"Git分支管理策略","date":"2020-03-02T06:10:46.000Z","updated":"2020-05-14T03:43:39.128Z","comments":true,"path":"2020/03/02/Git分支管理策略/","link":"","permalink":"https://damao2250.github.io/2020/03/02/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/","excerpt":"","text":"Git分支管理策略一. 主分支Master首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。 Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。 二、开发分支Develop主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。 这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在Master分支上，对Develop分支进行”合并”（merge）。 Git创建Develop分支的命令： 12git checkout -b develop master//后面是跟一个master说明，创建的develop分支是基于当前的master， 如果当前就在master分支，则可以不写。 如果当前分支HEAD指向的是别的分支，又想基于master分支创建，就必须写master 将Develop分支发布到Master分支的命令： 1234// 切换到Master分支git checkout master// 对Develop分支进行合并git merge --no-ff develop git merge --no-ff develop 中的 --no-ff 参数是什么意思。默认情况下，Git执行”快进式合并”（fast-farward merge），会直接将Master分支指向Develop分支。 使用–no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。(更希望使用这种做法，保证版本演进清晰) 三、临时性分支前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。 但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种： 123456// 功能（feature）分支// 预发布（release）分支// 修补bug（fixbug）分支 这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。 四、 功能分支功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。 功能分支的名字，可以采用feature-*的形式命名。 创建一个功能分支： 1git checkout -b feature-x develop 开发完成后，将功能分支合并到develop分支： 12git checkout developgit merge --no-ff feature-x 删除feature分支： 1git branch -d feature-x 五、预发布分支预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。 预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。 创建一个预发布分支： 1git checkout -b release-1.2 develop 确认没有问题后，合并到master分支： 1234git checkout mastergit merge --no-ff release-1.2// 对合并生成的新节点，做一个标签git tag -a 1.2 再合并到develop分支： 12git checkout developgit merge --no-ff release-1.2 最后，删除预发布分支： 1git branch -d release-1.2 六、修补bug分支最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。 修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。 创建一个修补bug分支： 1git checkout -b fixbug-0.1 master 修补结束后，合并到master分支： 123git checkout mastergit merge --no-ff fixbug-0.1git tag -a 0.1.1 再合并到develop分支： 12git checkout developgit merge --no-ff fixbug-0.1 最后，删除”修补bug分支”： 1git branch -d fixbug-0.1 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://damao2250.github.io/tags/git/"}]},{"title":"一些自己的项目规范","slug":"一些自己的项目规范","date":"2020-02-13T03:37:00.000Z","updated":"2020-05-14T03:28:15.669Z","comments":true,"path":"2020/02/13/一些自己的项目规范/","link":"","permalink":"https://damao2250.github.io/2020/02/13/%E4%B8%80%E4%BA%9B%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/","excerpt":"","text":"项目目录规范└─Code ├─www.github.com │ ├─project1 │ ├─project2 │ └─project3 └─www.xxx1.com ├─project1 ├─project2 └─project3 项目文件名及项目内命名规范 组件名，小驼峰：testComponents 函数名，小驼峰：testFunction 类名，横线：test-class document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"项目规范","slug":"项目规范","permalink":"https://damao2250.github.io/tags/%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/"}]},{"title":"Linux使用笔记","slug":"Linux使用笔记","date":"2020-01-13T05:50:18.000Z","updated":"2020-05-14T03:28:56.702Z","comments":true,"path":"2020/01/13/Linux使用笔记/","link":"","permalink":"https://damao2250.github.io/2020/01/13/Linux%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/","excerpt":"","text":"Linux 软件装在哪里？ opt目录 /opt 是用来安装附加软件包，是用户级程序目录，相当于 D:/soft，opt有可选的意思，安装到/opt目录下的程序，所有的数据、库文件都会放置在同一个目录下 /usr目录 /usr: 相当于 C:/Windows /usr/lib: 相当于 C:/Windows/System32 /usr/local: 相当于 C:/Progrem Files 是用户级程序目录，用户自己编译的软件默认会安装到此目录（存放手动安装的软件，即不是通过'yum'或'apt-get'安装的软件） 它和/usr有相似的目录结构，让软件包管理器来管理/usr，而把自定义脚本放到/usr/local目录下 ## 源码放哪里 /usr/src 系统级的源码目录 /usr/local/src 用户级的源码目录 Linux软件包管理（安装、删除）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677780. 下载软件包：wget 软件包地址1. 手动安装（tar.gz源、tar.bz2源） ① 下载相应的软件包，如soft.tar.gz/soft.tar.bz2 ② cd soft.tar.gz/soft.tar.bz2所在的目录 ③ tar -xzvf soft.tar.gz //一般会生成一个soft目录 ④ cd soft ⑤./configure // 为编译做准备 ⑥ make // 编译软件 （时间很久） ⑦ make install // 安装软件 ⑧ make clean // 删除安装产生的临时文件 2. rpm包安装 ① 下载相应的软件包，如soft.version.rpm ② cd soft.version.rpm所在的目录 ③ rpm -ivh soft.version.rpm // -i 安装软件 -t 测试安装，不是真的安装 -p 显示安装进度 -f 忽略任何错误 -U 升级安装 -v 检测套件是否正确安装 ④ 卸载 rpm -e 软件名3. dep包安装 ① 下载相应的软件包，如soft.version.dep ② cd soft.version.dep所在目录 ③ dpkg -i soft.version.dep ④ 卸载 dpkg -e 软件名 ⑤ 查看已安装的软件包 dpkg –l '*软件包名*'4. apt方式安装（安装deb包） ① apt-cache search 软件包 ② apt-get install 软件包 ③ 删除（保留配置文件） apt-get remove 软件名 ④ 删除（不保留配置文件） apt-get --purge remove 软件名 ⑤ dpkg --force-all --purge packagename ——有些软件很难卸载，而且还阻止了别的软件的应用，就可以用这个，不过有点冒险。 apt-get autoremove——因为apt会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件。 apt-get autoclean——定期运行这个命令来清除那些已经卸载的软件包的.deb文件。通过这种方式，可以释放大量的磁盘空间。如果需求十分迫切，可以使用apt-get clean以释放更多空间。这个命令会将已安装软件包裹的.deb文件一并删除。 apt-get clean——这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。 apt-get upgrade——更新所有已安装的软件包 apt-get dist-upgrade——将系统升级到新版本 apt-cache search string——在软件包列表中搜索字符串 apt-cache showpkg pkgs——显示软件包信息。 apt-cache stats——查看库里有多少软件 apt-cache dumpavail——打印可用软件包列表。 apt-cache show pkgs——显示软件包记录，类似于dpkg –print-avail。 apt-cache pkgnames——打印软件包列表中所有软件包的名称5. yum方式安装 ① yum -y install 软件包 ② 卸载 yum remove 软件名 ③ 已安装列表 yum list all ④ 查看软件包信息 yum info 软件名 ⑥ 升级所有的软件包 yum update 软件名 ⑦ 清除所有包缓存 yum clean all // 切换yum源// 首先备份/etc/yum.repos.d/CentOS-Base.repo// 重命名mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup// 下载对应版本 repo 文件, 放入 /etc/yum.repos.d/ (操作前请做好相应备份)// 163源CentOS5 ：http://mirrors.163.com/.help/CentOS5-Base-163.repoCentOS6 ：http://mirrors.163.com/.help/CentOS6-Base-163.repoCentOS7 ：http://mirrors.163.com/.help/CentOS7-Base-163.repo// 阿里云源CentOS5 ：http://mirrors.aliyun.com/repo/Centos-5.repoCentOS6 ：http://mirrors.aliyun.com/repo/Centos-6.repoCentOS7 ：http://mirrors.aliyun.com/repo/Centos-7.repo// 下载wget http://mirrors.163.com/.help/CentOS6-Base-163.repo//重命名mv CentOS6-Base-163.repo CentOS-Base.repo// 运行以下命令生成缓存yum clean allyum makecache 自己在Linux 上的一些操作 安装 node 123456node -v // 查看是否已安装yum install nodejs // 安装nodejs 询问时 输入 yrpm -qa | grep node // 查看是否已安装rpm -ql node // 查看安装路径 安装 Nginx 12345yum install nginx // 安装nginxsystemctl start nginx.service // 启动nginxsystemctl enable nginx.service // 开机启动systemctl stop nginx.service // 停止nginx服务 配置Nginx 配置两个ssl证书123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125# For more information on configuration, see:# * Official English Documentation: http://nginx.org/en/docs/# * Official Russian Documentation: http://nginx.org/ru/docs/user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.include /usr/share/nginx/modules/*.conf;events { worker_connections 1024;}http { log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; # Load modular configuration files from the /etc/nginx/conf.d directory. # See http://nginx.org/en/docs/ngx_core_module.html#include # for more information. include /etc/nginx/conf.d/*.conf; server { listen 80 default_server; listen [::]:80 default_server; server_name www.damao2250.com; root /var/www/damao; #告诉浏览器有效期内只准用 https 访问 add_header Strict-Transport-Security max-age=15768000; #永久重定向到 https 站点 return 301 https://$server_name$request_uri; }# Settings for a TLS enabled server. server { listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; server_name www.damao2250.com; root /var/www/damao; ssl_certificate \"/opt/ssl/www.damao2250.com/www.damao2250.com.pem\"; ssl_certificate_key \"/opt/ssl/www.damao2250.com/www.damao2250.com.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / { } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } } server { listen 80; server_name ycy.damao2250.com; #告诉浏览器有效期内只准用 https 访问 add_header Strict-Transport-Security max-age=15768000; #永久重定向到 https 站点 return 301 https://$server_name$request_uri; }# Settings for a TLS enabled server. server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name ycy.damao2250.com; root /var/www/ycy; ssl_certificate \"/opt/ssl/ycy.damao2250.com/ycy.damao2250.com.pem\"; ssl_certificate_key \"/opt/ssl/ycy.damao2250.com/ycy.damao2250.com.key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / { } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } }} 部署Gitlab123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293// 安装依赖软件yum -y install policycoreutils policycoreutils-python openssh-server openssh-clients postfix// but already installed and latest version &amp;&amp; Nothing to do// 开启postfix， postfix支持gitlab发信功能，设置postfix开机自启systemctl enable postfix &amp;&amp; systemctl start postfix// 如若 postfix 无法启动// 修改 /etc/postfix/main.cfinet_interfaces = allinet_protocols = ipv4systemctl start postfixsystemctl enable postfix// 如无法ssh来远程连接主机的 开启 ssh systemctl enable sshdsystemctl start sshd// 安装防火墙yum install firewalld systemd -y// 开启防火墙service firewalld start// 添加http服务到firewalld,pemmanent表示永久生效，若不加--permanent系统下次启动后就会失效。firewall-cmd --permanent --add-service=http// 重启防火墙systemctl reload firewalld// 下载gitlabwget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-12.5.0-ce.0.el7.x86_64.rpm// 安装 ce代表社区版 ee代表企业版rpm -i gitlab-ce-12.5.0-ce.0.el7.x86_64.rpm// 修改配置文件 gitlab.rb 使用外部nginx 不使用内部nginxvim /etc/gitlab/gitlab.rbexternal_url 'http://120.79.166.206:8888'// 重置并启动gitlabgitlab-ctl stopgitlab-ctl reconfiguregitlab-ctl restart// 如果执行 gitlab-ctl reconfigure 卡死在 ruby_block[authorize Grafana with GitLab] action run 就强制结束 ctrl+c 然后systemctl restart gitlab-runsvdir// 再gitlab-ctl stopgitlab-ctl reconfiguregitlab-ctl restart// 访问报502。原因是nginx用户无法访问gitlab用户的socket文件。 重启gitlab需要重新授权chmod -R o+x /var/opt/gitlab/gitlab-rails// 访问502也可能是 内存太小 超时了// 初始账户: root 密码:5iveL!fe// 完全卸载GitLab// 一. 停止gitlab// sudo gitlab-ctl stop// 二、卸载gitlab（这块注意了，看看是gitlab-ce版本还是gitlab-ee版本，别写错误了）// sudo rpm -e gitlab-ce// 三、查看gitlab进程// ps -ef|grep gitlab// &nbsp; &nbsp;杀掉第一个守护进程(runsvdir -P /opt/gitlab/service log)// &nbsp; &nbsp;kill -9 4473// &nbsp; &nbsp;再次查看gitlab进程是否存在// 四、删除gitlab文件// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;find / -name *gitlab*|xargs rm -rf &nbsp; &nbsp; &nbsp;删除所有包含gitlab的文件及目录// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;find / -name gitlab |xargs rm -rf&nbsp;// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除gitlab-ctl uninstall时自动在root下备份的配置文件（ls /root/gitlab* 看看有没有，有也删除）// 通过以上几步就可以彻底卸载gitlab document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://damao2250.github.io/tags/Linux/"}]},{"title":"Windows下的Nginx及OpenResty的基础使用","slug":"Windows下的Nginx及OpenResty的基础使用","date":"2019-12-31T00:56:56.000Z","updated":"2020-05-14T03:30:00.766Z","comments":true,"path":"2019/12/31/Windows下的Nginx及OpenResty的基础使用/","link":"","permalink":"https://damao2250.github.io/2019/12/31/Windows%E4%B8%8B%E7%9A%84Nginx%E5%8F%8AOpenResty%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/","excerpt":"","text":"Nginx基础命令1234567891011121314151617181920212223242526272829// 启动start nginxnginx.exe// 停止nginx -s stop // 快速停止，不保存信息nginx -s quit // 完整有序停止并保存信息// 重新载入nginx -s reload// 重新打开日志文件nginx -s reopen// 查看 Nginx 版本nginx -v // 简单nginx -V // 详细// 查看 Nginx 是否正常启动tasklist/fi \"imagename eq nginx.exe\"// 杀对应pid进程taskklii /pid {pid}// 强制杀对应pid进程taskklii /pid {pid} /f// 杀nginx全部进程taskkill /im nginx.exe /f Nginx配置详解1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556// ########### 每个指令必须有分号结束。#################// #user administrator administrators; #配置用户或者组，默认为nobody nobody。// #worker_processes 2; #允许生成的进程数，默认为1// #pid /nginx/pid/nginx.pid; #指定nginx进程运行文件存放地址// error_log log/error.log debug; #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg// events {// accept_mutex on; #设置网路连接序列化，防止惊群现象发生，默认为on// multi_accept on; #设置一个进程是否同时接受多个网络连接，默认为off// #use epoll; #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport// worker_connections 1024; #最大连接数，默认为512// }// http {// include mime.types; #文件扩展名与文件类型映射表// default_type application/octet-stream; #默认文件类型，默认为text/plain// #access_log off; #取消服务日志 // log_format myFormat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; #自定义格式// access_log log/access.log myFormat; #combined为日志格式的默认值// sendfile on; #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。// sendfile_max_chunk 100k; #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。// keepalive_timeout 65; #连接超时时间，默认为75s，可以在http，server，location块。// upstream mysvr { // server 127.0.0.1:7878;// server 192.168.10.121:3333 backup; #热备// }// error_page 404 https://www.baidu.com; #错误页// server {// keepalive_requests 120; #单连接请求上限次数。// listen 4545; #监听端口// server_name 127.0.0.1; #监听地址 // location ~*^.+$ { #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。// #root path; #根目录// #index vv.txt; #设置默认页// proxy_pass http://mysvr; #请求转向mysvr 定义的服务器列表// deny 127.0.0.1; #拒绝的ip// allow 172.18.5.54; #允许的ip // } // }// }// # 1.$remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；// # 2.$remote_user ：用来记录客户端用户名称；// # 3.$time_local ： 用来记录访问时间与时区；// # 4.$request ： 用来记录请求的url与http协议；// # 5.$status ： 用来记录请求状态；成功是200；// # 6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；// # 7.$http_referer ：用来记录从那个页面链接访问过来的；// # 8.$http_user_agent ：记录客户端浏览器的相关信息；// # 1、全局块（events块之前）：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。// # 2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。// # 3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。// # 4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。// # 5、location块：配置请求的路由，以及各种页面的处理情况。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://damao2250.github.io/tags/Nginx/"}]},{"title":"MongoDB及mLab的基础使用","slug":"MongoDB及mLab的基础使用","date":"2019-12-31T00:55:54.000Z","updated":"2020-05-14T03:29:11.811Z","comments":true,"path":"2019/12/31/MongoDB及mLab的基础使用/","link":"","permalink":"https://damao2250.github.io/2019/12/31/MongoDB%E5%8F%8AmLab%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"https://damao2250.github.io/tags/MongoDB/"}]},{"title":"解决elment-ui折叠和收缩导航栏延时动画效果","slug":"解决elment-ui折叠和收缩导航栏延时动画效果","date":"2019-12-12T07:03:04.000Z","updated":"2020-05-14T03:34:57.626Z","comments":true,"path":"2019/12/12/解决elment-ui折叠和收缩导航栏延时动画效果/","link":"","permalink":"https://damao2250.github.io/2019/12/12/%E8%A7%A3%E5%86%B3elment-ui%E6%8A%98%E5%8F%A0%E5%92%8C%E6%94%B6%E7%BC%A9%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%BB%B6%E6%97%B6%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/","excerpt":"","text":"解决elment-ui折叠和收缩导航栏延时动画效果 解决方法： 最外层包一层div 通过div类名设置样式穿透 123456789101112131415.layout-aside-menu /deep/ .collapse-transition { -webkit-transition: 0s height, 0s padding-top, 0s padding-bottom; transition: 0s height, 0s padding-top, 0s padding-bottom;}.layout-aside-menu /deep/ .horizontal-collapse-transition { -webkit-transition: 0s width, 0s padding-left, 0s padding-right; transition: 0s width, 0s padding-left, 0s padding-right;}.layout-aside-menu /deep/ .horizontal-collapse-transition .el-submenu__title .el-submenu__icon-arrow { -webkit-transition: 0s; transition: 0s; opacity: 0;} 补充点： stylus的样式穿透 使用 &gt;&gt;&gt; 外层 &gt;&gt;&gt; 第三方组件 { 样式 } 12.wrapper &gt;&gt;&gt; .swiper-pagination-bullet-activebackground: #fff sass和less的样式穿透 使用 /deep/ 外层 /deep/ 第三方组件 { 样式 } 123.wrapper /deep/ .swiper-pagination-bullet-active{ background: #fff;} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"Element-ui","slug":"Element-ui","permalink":"https://damao2250.github.io/tags/Element-ui/"}]},{"title":"hexo-theme-indigo使用遇到的问题","slug":"hexo-theme-indigo使用遇到的问题","date":"2019-12-11T07:15:51.000Z","updated":"2020-05-15T06:26:56.227Z","comments":true,"path":"2019/12/11/hexo-theme-indigo使用遇到的问题/","link":"","permalink":"https://damao2250.github.io/2019/12/11/hexo-theme-indigo%E4%BD%BF%E7%94%A8%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"","text":"Hexo 主题地址 https://github.com/yscoder/hexo-theme-indigo 问题 主页的导航栏关闭的×按钮，以及搜索按钮，分享按钮，每次点击出现动画前都会新打开一个about:blank#blocked页面。查看html发现相应的 a标签中都有 target=’_blank’ 可能是在编译的时候默认把a标签的target属性自动补上了，要是a标签本身就有target这个属性就不会往上加了 解决： 菜单关闭按钮 打开themes\\indigo\\layout_partial\\menu.ejs 找到 id=\"menu-off\" 的a标签 在a标签上新增 target=\"\" 搜索图标菜单关闭按钮 打开themes\\indigo\\layout_partial\\header.ejs 找到 id=\"search\" 的a标签 在a标签上新增 target=\"\" 右侧分享按钮 打开 themes\\indigo\\layout_partial\\header.ejs 找到 id=\"menuShare\" 的a标签 在a标签上新增 target=\"\" 点击赞赏按钮、关闭赞赏框 打开 themes\\indigo\\layout\\_partial\\post.ejs 找到 id=\"rewardBtn\" 的a标签 在a标签上新增 target=\"\" 打开 themes\\indigo\\layout\\_partial\\post\\reward.ejs 找到 id=\"rewardOff\" 的a标签 在a标签上新增 target=\"\" document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://damao2250.github.io/tags/Hexo/"}]},{"title":"JSDoc注释规范","slug":"JSDoc注释规范","date":"2019-12-02T03:30:16.000Z","updated":"2020-05-14T03:28:50.073Z","comments":true,"path":"2019/12/02/JSDoc注释规范/","link":"","permalink":"https://damao2250.github.io/2019/12/02/JSDoc%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271/** * @abstract (同义：@virtual) * 该成员必须由继承者实现（或重写） * This member must be implemented (or overridden) by the inheritor. * * @access * 指定此成员的访问级别（私有，程序包私有，公共或受保护）。 * Specify the access level of this member (private, package-private, public, or protected). * * @alias * 将成员视为具有不同的名称。 * Treat a member as if it had a different name. * * @async * 表示一个函数是异步的。 * Indicate that a function is asynchronous. * * @augments * 指示符号从父符号继承并添加到父符号。 * Indicate that a symbol inherits from, and adds to, a parent symbol. * * @author * 标识项目的作者。 * Identify the author of an item. * * @borrows * 该对象使用来自另一个对象的东西 * This object uses something from another object. * * @callback * 记录回调函数。 * Document a callback function. * * @class (同义：@constructor) * 该功能旨在通过\"new\"关键字来调用。 * This function is intended to be called with the \"new\" keyword. * * @classdesc * 使用以下文本描述整个类 * Use the following text to describe the entire class. * * @constant (同义：@const) * 将对象记录为常量 * Document an object as a constant. * * @constructs * 该函数成员将是上一类的构造函数 * This function member will be the constructor for the previous class. * * @copyright * 记录一些版权信息 * Document some copyright information. * * @default * 记录默认值 * Document the default value. * * @deprecated * 记录这不再是首选方法 * Document that this is no longer the preferred way. * * @description (同义：@desc) * 描述一个符号 * Describe a symbol. * * @enum * 记录相关属性的集合 * Document a collection of related properties. * * @event * 记录事件 * Document an event. * * @example * 提供有关如何使用已记录项目的示例 * Provide an example of how to use a documented item. * * @exports * 标识由JavaScript模块导出的成员 * Identify the member that is exported by a JavaScript module. * * @external(同义：@host) * 标识外部类，名称空间或模块 * Identifies an external class, namespace, or module. * * @file(同义：@fileoverview,@overview) * 描述一个文件 * Describe a file. * * @fires(同义：@emits) * 描述此方法可能触发的事件 * Describe the events this method may fire. * * @function(同义：@function,@method) * 描述一个函数或方法 * Describe a function or method. * * @generator * 表示函数是生成器函数 * Indicate that a function is a generator function. * * @global * 记录全局对象 * Document a global object. * * @hideconstructor * 指示不应显示构造函数 * Indicate that the constructor should not be displayed. * * @ignore * 省略文档中的符号 * Omit a symbol from the documentation. * * @implements * 该符号实现一个​​接口 * This symbol implements an interface. * * @inheritdoc * 指示符号应继承其父级的文档 * Indicate that a symbol should inherit its parent's documentation. * * @inner * 记录内部对象 * Document an inner object. * * @instance * 记录实例成员 * Document an instance member. * * @interface * 此符号是其他人可以实现的接口 * This symbol is an interface that others can implement. * * @kind * 这是什么符号 * What kind of symbol is this? * * @lends * 在对象文字上记录属性，就好像它们属于具有给定名称的符号一样 * Document properties on an object literal as if they belonged to a symbol with a given name. * * @license * 标识适用于此代码的许可证 * Identify the license that applies to this code. * * @listens * 列出符号侦听的事件 * List the events that a symbol listens for. * * @member * 记录成员 * Document a member. * * @memberof * 该符号属于父符号 * This symbol belongs to a parent symbol. * * @mixes * 该对象混合了另一个对象的所有成员 * This object mixes in all the members from another object. * * @mixin * 记录一个混合对象 * Document a mixin object. * * @module * 编写一个JavaScript模块 * Document a JavaScript module. * * @name * 记录对象的名称 * Document the name of an object. * * @namespace * 记录名称空间对象 * Document a namespace object. * * @override * 指示符号覆盖其父代 * Indicate that a symbol overrides its parent. * * @package * 此符号是软件包专用的 * This symbol is meant to be package-private. * * @param(同义：@arg,@argument) * 将参数记录到函数中 * Document the parameter to a function. * * @private * 此符号是专用的 * This symbol is meant to be private. * * @property(同义：@prop) * 记录对象的属性 * Document a property of an object. * * @protected * 此符号用于保护 * This symbol is meant to be protected. * * @public * 此符号是公开的 * This symbol is meant to be public. * * @readonly * 该符号是只读的 * This symbol is meant to be read-only. * * @requires * 该文件需要一个JavaScript模块 * This file requires a JavaScript module. * * @returns * 记录函数的返回值 * Document the return value of a function. * * @see * 有关更多信息，请参考其他一些文档 * Refer to some other documentation for more information. * * @since * 何时添加此功能 * When was this feature added? * * @static * 记录静态成员 * Document a static member. * * @summary * 完整说明的简短版本 * A shorter version of the full description. * * @this * \"this\"关键字在这里指的是什么 * What does the 'this' keyword refer to here? * * @throws(同义：@exception) * 描述可能引发的错误 * Describe what errors could be thrown. * * @todo * 记录要完成的任务 * Document tasks to be completed. * * @tutorial(教程) * 插入指向随附的教程文件的链接 * Insert a link to an included tutorial file. * * @type * 记录对象的类型 * Document the type of an object. * * @typedef * 记录自定义类型 * Document a custom type. * * @variation * 区分具有相同名称的不同对象 * Distinguish different objects with the same name. * * @version * 记录项目的版本号 * Documents the version number of an item. * * @yields(同义：@yield) * 记录生成器函数产生的值 * Document the value yielded by a generator function. * */ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"项目规范","slug":"项目规范","permalink":"https://damao2250.github.io/tags/%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/"}]},{"title":"使用git同时提交到两个远程库","slug":"使用git同时提交到两个远程库","date":"2019-11-27T09:41:30.000Z","updated":"2020-05-14T03:27:49.058Z","comments":true,"path":"2019/11/27/使用git同时提交到两个远程库/","link":"","permalink":"https://damao2250.github.io/2019/11/27/%E4%BD%BF%E7%94%A8git%E5%90%8C%E6%97%B6%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%A4%E4%B8%AA%E8%BF%9C%E7%A8%8B%E5%BA%93/","excerpt":"","text":"使用git同时提交到多个远程库法11、添加第一个仓库： git remote add origin https://gitlab.com/XXX/xxx.git 2、添加第二个仓库： git remote set-url --add https://github.com/XXX/xxx.git 如果还有其他仓库，就以此方式继续添加 3、提交 git push origin --all or git push ================================================================== 1234567891011// tips：// 打开.git/config，可以看到这样的配置：`[remote \"origin\"] url = https://gitlab.com/XXX/xxx.git fetch = +refs/heads/*:refs/remotes/origin/* url = https://github.com/XXX/xxx.git`// 刚才的命令其实就是添加了这些配置,也可以不用命令行，可以直接编辑该文件，添加对应的url即可 法2 直接添加另一个远程仓库地址git remote add [name] [远程库地址]git push [name] 123456789101112131415161718192021222324252627// [name] 取个远程库名并连接远程地址 然后push上去 git默认的[name]为origin// 如：// git remote add test https://github.com/XXX/xxx.git// git push test// 但是想同步两个远程仓库必须同时push &amp;&amp; pull// git push origin// git push test// git pull origin// git pull test// 查看.gigt中的config文件`[remote \"origin\"] url = https://gitlab.com/XXX/xxx.git fetch = +refs/heads/*:refs/remotes/origin/*[branch \"master\"] remote = origin merge = refs/heads/master[remote \"test\"] url = https://github.com/XXX/xxx.git fetch = +refs/heads/*:refs/remotes/test/*` document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://damao2250.github.io/tags/git/"}]},{"title":"vue的一些优化","slug":"vue的一些优化","date":"2019-11-26T10:05:18.000Z","updated":"2020-05-14T03:29:46.446Z","comments":true,"path":"2019/11/26/vue的一些优化/","link":"","permalink":"https://damao2250.github.io/2019/11/26/vue%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BC%98%E5%8C%96/","excerpt":"","text":"打包优化 路由懒加载 12345{ path: '/about', name: 'about', component: () =&gt; import('@/views/about/about'),}, 不生成.map 文件 webpack默认会生成map文件，map文件是用来调试代码的。此外，这里还要注意sourcemap的配置分 开发（dev）和线上（build）两个地方配置，开发我们就不管了，就用默认的，线上我们是不需要这个代码的。1234// 配置 vue.config.jsmodule.exports = { productionSourceMap: false,} Element组件按需加载 12345678910111213141516171819202122// 安装 babel-plugin-component：npm install babel-plugin-component -D// 修改babel.config.jsmodule.exports = { presets: [ [ '@vue/app', { useBuiltIns: \"entry\" } ] ], plugins: [ [ \"component\", { \"libraryName\": \"element-ui\", \"styleLibraryName\": \"theme-chalk\" } ] ]} echart优化 1234567891011121314151617181920212223242526272829303132333435363738394041424344// 安装 babel-plugin-equirenpm install babel-plugin-equire -D// 修改babel.config.jsmodule.exports = { plugins: [ 'equire' ], // others}// 新建echarts.jsconst echarts = equire([ 'title', 'legend', 'grid', 'line', 'bar', 'pie', // others])export default echarts// 或者// 新建echarts.jsimport echarts from 'echarts/lib/echarts'import 'echarts/lib/chart/line'import 'echarts/lib/chart/lines'import 'echarts/lib/chart/radar'import 'echarts/lib/component/legend'import 'echarts/lib/component/tooltip'import 'echarts/lib/component/grid'export default echarts// 然后再到需要引用echarts的页面进行引入import echarts from '../echarts'; 图片的压缩合并 无损压缩图片：https://tinypng.com/ 添加分析工具123456789101112131415161718192021// 安装npm i webpack-bundle-analyzer// 在 vue.config.js 中添加module.exports={ chainWebpack: (config) =&gt; { /* 添加分析工具 */ if (process.env.NODE_ENV === 'production') { if (process.env.npm_config_report) { config. plugin('webpack-bundle-analyzer') .use(require('webpack-bundle-analyzer').BundleAnalyzerPlugin) .end() config.plugins.delete('prefetch') } } },}// 启动npm run build --report document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://damao2250.github.io/tags/Vue/"}]},{"title":"Vuex官方例子解读","slug":"Vuex官方例子解读","date":"2019-11-13T07:19:29.000Z","updated":"2020-05-14T03:29:52.192Z","comments":true,"path":"2019/11/13/Vuex官方例子解读/","link":"","permalink":"https://damao2250.github.io/2019/11/13/Vuex%E5%AE%98%E6%96%B9%E4%BE%8B%E5%AD%90%E8%A7%A3%E8%AF%BB/","excerpt":"","text":"安装123npm i vuexoryarn add vuex Vuex 是什么 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。 它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 核心概念 State 单一状态树，用一个对象就包含了全部的应用层级状态 Getter 相当于 State 的计算属性 Mutation 提交 mutation是更改 store 中状态的唯一方法, 相当于事件 Action 类似于 mutation, 但 Action 提交的是 mutation，而不是直接变更状态，而且可以包含任意异步操作 Module 将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter 官方购物车项目结构1234567891011121314├── index.html├── main.js├── api│ └── ... # 抽取出API请求├── components│ ├── App.vue│ └── ...└── store ├── index.js # 我们组装模块并导出 store 的地方 ├── actions.js # 根级别的 action ├── mutations.js # 根级别的 mutation └── modules ├── cart.js # 购物车模块 └── products.js # 产品模块 注意点 在 mutation-types.js 中定义类型常量，默认全部大写 —&gt; 把常量放在单独的文件中可以让你的代码合作者或者迭代者对整个 app 包含的 mutation 一目了然 Vuex- Action的 { commit }12345678910111213141516171819202122232425// Vuex 中 使用 Action 处理异步请求时，常规写法如下getMenuAction:(context) =&gt;{ context.commit('SET_MENU_LIST',['承保2','核保2']) }}// 我们也可以使用如下简化写法，如下actions:{ getMenuAction:({commit}) =&gt;{ commit('SET_MENU_LIST',['承保2','核保2']) }}// { commit } 是变量解构赋值context = { dispatch: local.dispatch, commit: local.commit, getters: local.getters, state: local.state, rootGetters: store.getters, rootState: store.state }// 常规写法 context.commit = context.local.commit// 使用变量解构赋值后 { commit } 相当于 commit= context.commit// state 同理 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"Vuex","slug":"Vuex","permalink":"https://damao2250.github.io/tags/Vuex/"}]},{"title":"PicGo+Github搭建图床","slug":"PicGo-Github搭建图床","date":"2019-11-13T01:15:42.000Z","updated":"2020-05-14T03:29:19.870Z","comments":true,"path":"2019/11/13/PicGo-Github搭建图床/","link":"","permalink":"https://damao2250.github.io/2019/11/13/PicGo-Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/","excerpt":"","text":"图床是什么 图床,是专门储存图片的空间,同时允许你为图片创建链接的网上空间 图床可以干什么 使用Markdown写作用到图片时，不可避免的就要用到图床，可以方便快捷的使用图片链接，在自己博客中插入的图片链接就可以随时随地在线预览了，并且不会因为任何意外原因无法查看 搭建一个简易的图床 （PicGo + Github） 下载PicGo：[https://github.com/Molunerfinn/PicGo ] 创建一个公开仓库， 创建一个公开仓库，点击右上角的个人头像出现下拉菜单，然后点倒数第二项 设置（英文版为 Setting），然后点左侧菜单的最后一个 Developer setting，然后再点左侧菜单的最后一个 Personal access tokens，然后在右侧有一个 Generate new token 的按钮，点击它，然后选择 repo，然后直接拉到最下面点击绿色的按钮 Generate token。之后会生成一个 token 码 ，需要注意的是这个 token 只显示一次！所以可以先把他复制保存的其他地方。其余三项不用填，直接确定然后设为默认图床即可 使用 把保存的图片拖到上传区的虚线框里或者直接点击上传即可。提示上传成功之后即可在相册的那栏里看到上传的照片，然后点对应图片下面的文本框似的按钮就可以直接复制外链地址然后粘贴到想要显示图片的地方就可以了 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"https://damao2250.github.io/tags/GitHub/"}]},{"title":"使用Taro实现微信小程序登录流程","slug":"使用Taro实现微信小程序登录流程","date":"2019-11-13T01:00:31.000Z","updated":"2020-05-14T03:27:57.789Z","comments":true,"path":"2019/11/13/使用Taro实现微信小程序登录流程/","link":"","permalink":"https://damao2250.github.io/2019/11/13/%E4%BD%BF%E7%94%A8Taro%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/","excerpt":"","text":"流程 实现1.调用Taro.login()获取登录凭证code；2.调用Taro.request()将code传到服务器；3.服务器端调用微信登录校验接口（appid+appsecret+code），获得session_key+openid；4.服务器端生成AUTH_TICKET（相当于userId），使用AUTH_TICKET为key，session_key+openid为value的形式存在服务器，并将AUTH_TICKET传送给客户端；5.客户端本地存储AUTH_TICKET，登录成功！6.下次登录时可以用AUTH_TICKET传输到服务器端验证登录态是否过期，未过期则登录成功。 获取用户信息 获取用户信息一定要用户主动点击按钮授权123456789101112131415161718&lt;Button openType=\"getUserInfo\" onGetUserInfo={this.onGetUserInfo} type=\"primary\"&gt;微信授权登录，获取用户信息&lt;/Button&gt;onGetUserInfo(info) { console.log(info.detail); if (info.detail.errMsg === \"getUserInfo:ok\") { Taro.showToast({ title: '授权成功，正在登录...', icon: 'none', mask: true }) } else { Taro.showToast({ title: '未授权,请授权登录！', icon: 'none', mask: true }) } } 注意 Taro 支持使用 async functions 来让开发者获得不错的异步编程体验，开启 async functions 支持需要安装包 @tarojs/async-await $ yarn add @tarojs/async-await 或者使用 npm $ npm install –save @tarojs/async-await 随后在项目入口文件 app.js 中直接 import ，就可以开始使用 async functions 功能了 // src/app.js import ‘@tarojs/async-await’ 值得注意的事，使用 @tarojs/async-await 一定要记得按照 开发前注意[https://taro-docs.jd.com/taro/docs/before-dev-remind.html] 中提示的内容进行操作，否则会出现报错 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"Taro","slug":"Taro","permalink":"https://damao2250.github.io/tags/Taro/"}]},{"title":"React+GGEditor搭建可视化图编辑器项目","slug":"React-GGEditor搭建可视化图编辑器项目","date":"2019-11-11T03:00:27.000Z","updated":"2020-05-14T03:29:33.317Z","comments":true,"path":"2019/11/11/React-GGEditor搭建可视化图编辑器项目/","link":"","permalink":"https://damao2250.github.io/2019/11/11/React-GGEditor%E6%90%AD%E5%BB%BA%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E7%BC%96%E8%BE%91%E5%99%A8%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"介绍 GG-editor 插件基于 React 框架，可以创建编辑思维导图、流程图、拓扑图等图形 项目依赖： react-router-dom, gg-editor, antd 安装所需依赖 1234567891011121314151617// 初始化项目create-react-app ggeditore// 安装依赖npm i react-router-domnpm i gg-editornpm i antdoryarn add react-router-domyarn add gg-editoryarn add antd// 安装 gg-editor// 不要安装 bate 的版本npm i gg-editor@2.0.4oryarn add gg-editor@2.0.4 使用 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859// Flowimport GGEditor, { Flow } from 'gg-editor';const data = { nodes: [{ type: 'node', size: '70*70', shape: 'flow-circle', color: '#FA8C16', label: '起止节点', x: 55, y: 55, id: 'ea1184e8', index: 0, }, { type: 'node', size: '70*70', shape: 'flow-circle', color: '#FA8C16', label: '结束节点', x: 55, y: 255, id: '481fbb1a', index: 2, }], edges: [{ source: 'ea1184e8', sourceAnchor: 2, target: '481fbb1a', targetAnchor: 0, id: '7989ac70', index: 1, }],};&lt;GGEditor&gt; &lt;Flow style={{ width: 500, height: 500 }} data={data} /&gt;&lt;/GGEditor&gt;// Mindimport GGEditor, { Mind } from 'gg-editor';const data = { roots: [{ label: '中心主题', children: [{ label: '分支主题 1', }, { label: '分支主题 2', }, { label: '分支主题 3', }], }],};&lt;GGEditor&gt; &lt;Mind style={{ width: 500, height: 500 }} data={data} /&gt;&lt;/GGEditor&gt; 高阶用法（可编辑） 详细请看Github代码: [https://github.com/damao2250] document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"React","slug":"React","permalink":"https://damao2250.github.io/tags/React/"}]},{"title":"React-Router的使用","slug":"React-Router的使用","date":"2019-11-11T01:37:32.000Z","updated":"2020-05-14T03:29:39.419Z","comments":true,"path":"2019/11/11/React-Router的使用/","link":"","permalink":"https://damao2250.github.io/2019/11/11/React-Router%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"1. 使用 react-router 还是 react-router-dom ？React-router React Router 包含3个库, react-router、react-router-dom、和 react-router-native。react-router 提供最基本的路由功能，实际使用，我们不会直接安装 react-router,而是根据应用运行的环境选择安装 react-router-dom(在浏览器中使用)或 react-router-native(在 react-native中使用)。react-router-dom 和 react-router-native 都依赖 react-router,所以在安装时， react-router 也会自动安装。两者的关系 react-router：提供 router 的核心api。如 Router、Route、Switch 等，没有提供有关dom操作进行路由跳转的api react-router-dom：提供 BrowserRouter、Route、Link等api，可以通过dom操作控制路由 react-router-dom：基于 react-router，加入了在浏览器运行环境下的一些功能，例如：Link 组件，会渲染一个 a 标签，Link 组件源码a标签行; BrowserRouter和HashRouter 组件，前者使用 pushState 和 popState 事件构建路由，后者使用 window.location.hash 和 hashchange 事件构建路由。 react-router-dom 里包含了 react-router 的依赖，因此只需要安装后者即可 使用 123npm i react-router-domoryarn add react-router-dom 简易使用示例 1.新建一个 router/index.js 文件 123456789101112131415161718192021222324// router/index.jsimport React from 'react'// 引入一些模块import { BrowserRouter as Router, Route, Redirect } from 'react-router-dom'//引入需要用到的页面组件 import Home from './../views/home/home'import About from './../views/about/about'function router() { return ( // Route 路由 // Redirect 重定向 &lt;Router&gt; &lt;Route path=\"/home\" component={Home} /&gt; &lt;Route path=\"/\" render={ () =&gt; &lt;Redirect to=\"/home\" /&gt;}&gt; &lt;/Route&gt; &lt;Route path=\"/about\" component={About}&gt;&lt;/Route&gt; &lt;/Router&gt; )}export default router 2.home组件 123456789101112131415161718//home.jsimport React, { Component } from 'react';import { Link } from 'react-router-dom'export default class Home extends Component { render() { // Link 路由跳转 return ( &lt;div&gt; &lt;ul&gt; &lt;li&gt;&lt;Link to=\"/home\"&gt;Home&lt;/Link&gt;&lt;/li&gt; &lt;li&gt;&lt;Link to=\"/about\"&gt;About&lt;/Link&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;home&lt;/h1&gt; &lt;/div&gt; ) }} 3.about组件 123456789101112131415161718//about.jsimport React, { Component } from 'react';import { Link } from 'react-router-dom'export default class About extends Component { render() { // Link 路由跳转 return ( &lt;div&gt; &lt;ul&gt; &lt;li&gt;&lt;Link to=\"/home\"&gt;Home&lt;/Link&gt;&lt;/li&gt; &lt;li&gt;&lt;Link to=\"/about\"&gt;About&lt;/Link&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;about&lt;/h1&gt; &lt;/div&gt; ) }} 4.app.js中引入router 123456789101112import React, { Component } from 'react';import Router from './router'export default class App extends Component { render(){ return ( &lt;div&gt; &lt;Router /&gt; &lt;/div&gt; ) }} 5.嵌套路由 12345678910111213141516171819202122232425262728293031323334353637383940414243// about.jsimport React, { Component } from 'react';import { Link } from 'react-router-dom'export default class About extends Component { render() { return ( // {this.props.children} ==&gt; 显示嵌套路由 &lt;div&gt; &lt;ul&gt; &lt;li&gt;&lt;Link to=\"/home\"&gt;Home&lt;/Link&gt;&lt;/li&gt; &lt;li&gt;&lt;Link to=\"/about\"&gt;About&lt;/Link&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;about&lt;/h1&gt; {this.props.children} &lt;/div&gt; ) }}// router/index.jsimport React from 'react'import { BrowserRouter as Router, Route, Redirect } from 'react-router-dom'import Home from './../views/home/home'import About from './../views/about/about'import somePage from './../views/somePage/somePage'function router() { return ( &lt;Router&gt; &lt;Route path=\"/home\" component={Home} /&gt; &lt;Route path=\"/\" render={ () =&gt; &lt;Redirect to=\"/home\" /&gt;}&gt; &lt;/Route&gt; &lt;Route path=\"/about\" render={()=&gt;( &lt;About&gt; &lt;Route path=\"/about/somePage\" component={somePage} /&gt; &lt;/About&gt; )}&gt; &lt;/Route&gt; &lt;/Router&gt; )}export default router 参考[https://segmentfault.com/a/1190000016421036] document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"React","slug":"React","permalink":"https://damao2250.github.io/tags/React/"}]},{"title":"Hexo+Github搭建博客","slug":"Hexo-Github搭建博客","date":"2019-11-08T05:01:51.000Z","updated":"2020-05-14T03:28:30.834Z","comments":true,"path":"2019/11/08/Hexo-Github搭建博客/","link":"","permalink":"https://damao2250.github.io/2019/11/08/Hexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"github + hexo 创建个人博客 创建 &lt;github Name&gt;.github.io 仓库 全局安装hexo npm install -g hexo 初始化项目 1234// 构建 hexo 项目hexo init// 启动服务hexo s 连接到 GitHub 修改根目录下 _congif.yml 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: &lt;你的仓库地址&gt; # 如：https://github.com/Damao2250/damao2250.github.io branch: master 自动部署到 GitHub 12345678// 安装部署工具npm install hexo-deployer-git --save// 自动部署hexo cleanhexo deploy// 打开 &lt;github Name&gt;.github.io 查看效果 部署简化 修改 package.json1234567// package.json\"build\": \"hexo clean &amp; hexo deploy\"// 部署命令npm run build 发布新文章 1234// [layout] 为布局，可选项为 `post`、`page`、`draft`，这将决定文章所在文件路径。// &lt;title&gt; 为文章标题// 如 hexo new post 这是一个文章标题hexo new [layout] &lt;title&gt; 更换主题 下载主题 -&gt; 更换主题12345// 下载到themes文件夹下git clone https://github.com/KevinOfNeu/hexo-theme-xoxo xoxo// 修改 _config.yml 配置theme: xoxo document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://damao2250.github.io/tags/Hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-11-04T09:26:28.315Z","updated":"2020-05-13T02:59:09.927Z","comments":true,"path":"2019/11/04/hello-world/","link":"","permalink":"https://damao2250.github.io/2019/11/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Vue3","slug":"Vue3","permalink":"https://damao2250.github.io/tags/Vue3/"},{"name":"小程序","slug":"小程序","permalink":"https://damao2250.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"axios","slug":"axios","permalink":"https://damao2250.github.io/tags/axios/"},{"name":"CSP","slug":"CSP","permalink":"https://damao2250.github.io/tags/CSP/"},{"name":"Github","slug":"Github","permalink":"https://damao2250.github.io/tags/Github/"},{"name":"canvas","slug":"canvas","permalink":"https://damao2250.github.io/tags/canvas/"},{"name":"Element-ui","slug":"Element-ui","permalink":"https://damao2250.github.io/tags/Element-ui/"},{"name":"JS","slug":"JS","permalink":"https://damao2250.github.io/tags/JS/"},{"name":"SVG","slug":"SVG","permalink":"https://damao2250.github.io/tags/SVG/"},{"name":"Vue","slug":"Vue","permalink":"https://damao2250.github.io/tags/Vue/"},{"name":"React Native for Windows","slug":"React-Native-for-Windows","permalink":"https://damao2250.github.io/tags/React-Native-for-Windows/"},{"name":"git","slug":"git","permalink":"https://damao2250.github.io/tags/git/"},{"name":"项目规范","slug":"项目规范","permalink":"https://damao2250.github.io/tags/%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/"},{"name":"Linux","slug":"Linux","permalink":"https://damao2250.github.io/tags/Linux/"},{"name":"Nginx","slug":"Nginx","permalink":"https://damao2250.github.io/tags/Nginx/"},{"name":"MongoDB","slug":"MongoDB","permalink":"https://damao2250.github.io/tags/MongoDB/"},{"name":"Hexo","slug":"Hexo","permalink":"https://damao2250.github.io/tags/Hexo/"},{"name":"Vuex","slug":"Vuex","permalink":"https://damao2250.github.io/tags/Vuex/"},{"name":"GitHub","slug":"GitHub","permalink":"https://damao2250.github.io/tags/GitHub/"},{"name":"Taro","slug":"Taro","permalink":"https://damao2250.github.io/tags/Taro/"},{"name":"React","slug":"React","permalink":"https://damao2250.github.io/tags/React/"}]}